
fwd-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000bd4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000c6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001499  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4c  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  000038e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  00003b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  0000415f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
  8a:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normalMode>:
uint8_t wasRedLedOn = 0;
uint8_t buttonPressed = 0;

void normalMode() {
	// For pedestrians, turn on red
	LED_on_only(LED_PEDESTRIANS_PORT, LED_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_on_only>

	// For cars, turn on green at first
	LED_on_only(LED_CARS_PORT, LED_GREEN_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_on_only>
	TIMER_delay_5s();
  a2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <TIMER_delay_5s>
	wasRedLedOn = 0;
  a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ae:	81 11       	cpse	r24, r1
  b0:	19 c0       	rjmp	.+50     	; 0xe4 <normalMode+0x52>

	// Then, turn off green => blink yellow
	LED_off(LED_CARS_PORT, LED_GREEN_PIN);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_blink(LED_CARS_PORT, LED_YELLOW_PIN);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 12 01 	call	0x224	; 0x224 <LED_blink>
	wasRedLedOn = 0;
  c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	81 11       	cpse	r24, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <normalMode+0x52>

	// Lastly, turn off yellow => turn on red
	LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_on(LED_CARS_PORT, LED_RED_PIN);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	TIMER_delay_5s();
  da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <TIMER_delay_5s>
	wasRedLedOn = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <wasRedLedOn>
  e4:	08 95       	ret

000000e6 <pedestrianMode>:
	if(buttonPressed) return;
}

void pedestrianMode() {
	if(wasRedLedOn) {
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <wasRedLedOn>
  ea:	88 23       	and	r24, r24
  ec:	49 f0       	breq	.+18     	; 0x100 <pedestrianMode+0x1a>
		// For cars, turn on red
		LED_on_only(LED_CARS_PORT, LED_RED_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_on_only>

		// For pedestrians, turn on green
		LED_on_only(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_on_only>
  fe:	26 c0       	rjmp	.+76     	; 0x14c <pedestrianMode+0x66>
	} else {
		// For cars and pedestrians, blink both yellow
		LED_off(LED_CARS_PORT, LED_RED_PIN);
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_CARS_PORT, LED_GREEN_PIN);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_RED_PIN);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 2c 01 	call	0x258	; 0x258 <LED_double_blink>
		
		// The, turn off both yellow => turn on cars red led and pedestrians green led
		LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_on(LED_CARS_PORT, LED_RED_PIN);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
		LED_on(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	}
	
	TIMER_delay_5s();
 14c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <TIMER_delay_5s>
	
	// Turn off cars red => Blink both yellow
	LED_off(LED_CARS_PORT, LED_RED_PIN);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 2c 01 	call	0x258	; 0x258 <LED_double_blink>
	
	isNormalMode = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	wasRedLedOn = 0;
 16a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	buttonPressed = 0;
 16e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 172:	08 95       	ret

00000174 <APP_init>:
}

void APP_init() {
	LEDS_init();
 174:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_init>
	BUTTON_init();
 178:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <BUTTON_init>
	TIMER_init();
 17c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <TIMER_init>
	INTERRUPTS_init();
 180:	0e 94 ca 02 	call	0x594	; 0x594 <INTERRUPTS_init>
 184:	08 95       	ret

00000186 <APP_start>:
}

void APP_start() {
	if(isNormalMode) {
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18a:	88 23       	and	r24, r24
 18c:	19 f0       	breq	.+6      	; 0x194 <APP_start+0xe>
		normalMode();
 18e:	0e 94 49 00 	call	0x92	; 0x92 <normalMode>
 192:	08 95       	ret
	} else {
		pedestrianMode();
 194:	0e 94 73 00 	call	0xe6	; 0xe6 <pedestrianMode>
 198:	08 95       	ret

0000019a <__vector_1>:
	}
}

ISR(EXT_INT_0) {
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
	if(!buttonPressed) {
 1a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1aa:	81 11       	cpse	r24, r1
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_1+0x1e>
		isNormalMode = 0;
 1ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		buttonPressed = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
}
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <BUTTON_init>:
 */ 

#include "button.h"

void BUTTON_init() {
	DIO_init(BUTTON_PORT, BUTTON_PIN, IN);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
 1ce:	08 95       	ret

000001d0 <LEDS_init>:
 */ 

#include "led.h"

void LEDS_init() {
	DIO_init(LED_CARS_PORT, LED_RED_PIN, OUT);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_YELLOW_PIN, OUT);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_GREEN_PIN, OUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>

	DIO_init(LED_PEDESTRIANS_PORT, LED_RED_PIN, OUT);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN, OUT);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_GREEN_PIN, OUT);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 82 01 	call	0x304	; 0x304 <DIO_init>
 20c:	08 95       	ret

0000020e <LED_on>:
}

void LED_on(EN_port_t port, EN_pin_t pin) {
	DIO_write(port, pin, HIGH);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_write>
 214:	08 95       	ret

00000216 <LED_off>:
}

void LED_off(EN_port_t port, EN_pin_t pin) {
	DIO_write(port, pin, LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_write>
 21c:	08 95       	ret

0000021e <LED_toggle>:
}

void LED_toggle(EN_port_t port, EN_pin_t pin) {
	DIO_toggle(port, pin);
 21e:	0e 94 90 02 	call	0x520	; 0x520 <DIO_toggle>
 222:	08 95       	ret

00000224 <LED_blink>:
}

void LED_blink(EN_port_t port, EN_pin_t pin) {
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	18 2f       	mov	r17, r24
 22e:	06 2f       	mov	r16, r22
	LED_on(port, pin);
 230:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	for(int i = 0; i < 5; i++) {
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	07 c0       	rjmp	.+14     	; 0x248 <LED_blink+0x24>
		TIMER_delay_1s();
 23a:	0e 94 77 03 	call	0x6ee	; 0x6ee <TIMER_delay_1s>
		LED_toggle(port, pin);
 23e:	60 2f       	mov	r22, r16
 240:	81 2f       	mov	r24, r17
 242:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
	DIO_toggle(port, pin);
}

void LED_blink(EN_port_t port, EN_pin_t pin) {
	LED_on(port, pin);
	for(int i = 0; i < 5; i++) {
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	c5 30       	cpi	r28, 0x05	; 5
 24a:	d1 05       	cpc	r29, r1
 24c:	b4 f3       	brlt	.-20     	; 0x23a <LED_blink+0x16>
		TIMER_delay_1s();
		LED_toggle(port, pin);
	}
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <LED_double_blink>:

void LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	f8 2e       	mov	r15, r24
 266:	e6 2e       	mov	r14, r22
 268:	14 2f       	mov	r17, r20
 26a:	02 2f       	mov	r16, r18
	LED_on(port1, pin1);
 26c:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	LED_on(port2, pin2);
 270:	60 2f       	mov	r22, r16
 272:	81 2f       	mov	r24, r17
 274:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	for(int i = 0; i < 5; i++) {
 278:	c0 e0       	ldi	r28, 0x00	; 0
 27a:	d0 e0       	ldi	r29, 0x00	; 0
 27c:	0b c0       	rjmp	.+22     	; 0x294 <LED_double_blink+0x3c>
		TIMER_delay_1s();
 27e:	0e 94 77 03 	call	0x6ee	; 0x6ee <TIMER_delay_1s>
		LED_toggle(port1, pin1);
 282:	6e 2d       	mov	r22, r14
 284:	8f 2d       	mov	r24, r15
 286:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
		LED_toggle(port2, pin2);
 28a:	60 2f       	mov	r22, r16
 28c:	81 2f       	mov	r24, r17
 28e:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
}

void LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
	LED_on(port1, pin1);
	LED_on(port2, pin2);
	for(int i = 0; i < 5; i++) {
 292:	21 96       	adiw	r28, 0x01	; 1
 294:	c5 30       	cpi	r28, 0x05	; 5
 296:	d1 05       	cpc	r29, r1
 298:	94 f3       	brlt	.-28     	; 0x27e <LED_double_blink+0x26>
		TIMER_delay_1s();
		LED_toggle(port1, pin1);
		LED_toggle(port2, pin2);
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	08 95       	ret

000002a8 <LED_on_only>:

void LED_on_only(EN_port_t port, EN_pin_t pin) {
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	d8 2f       	mov	r29, r24
 2ae:	c6 2f       	mov	r28, r22
	LED_on(port, pin);
 2b0:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	if(pin == LED_RED_PIN) {
 2b4:	c2 30       	cpi	r28, 0x02	; 2
 2b6:	49 f4       	brne	.+18     	; 0x2ca <LED_on_only+0x22>
		LED_off(port, LED_GREEN_PIN);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	8d 2f       	mov	r24, r29
 2bc:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(port, LED_YELLOW_PIN); 
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8d 2f       	mov	r24, r29
 2c4:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 2c8:	15 c0       	rjmp	.+42     	; 0x2f4 <LED_on_only+0x4c>
	} else if(pin == LED_GREEN_PIN) {
 2ca:	c1 11       	cpse	r28, r1
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <LED_on_only+0x38>
		LED_off(port, LED_RED_PIN); 
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	8d 2f       	mov	r24, r29
 2d2:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(port, LED_YELLOW_PIN); 
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	8d 2f       	mov	r24, r29
 2da:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <LED_on_only+0x4c>
	} else if(pin == LED_YELLOW_PIN) {
 2e0:	c1 30       	cpi	r28, 0x01	; 1
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <LED_on_only+0x4c>
		LED_off(port, LED_RED_PIN);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	8d 2f       	mov	r24, r29
 2e8:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(port, LED_GREEN_PIN); 
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	8d 2f       	mov	r24, r29
 2f0:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <main>:

#include "./Application/app.h"

int main(void)
{
	APP_init();
 2fa:	0e 94 ba 00 	call	0x174	; 0x174 <APP_init>
	
	while(1) {
		APP_start();
 2fe:	0e 94 c3 00 	call	0x186	; 0x186 <APP_start>
 302:	fd cf       	rjmp	.-6      	; 0x2fe <main+0x4>

00000304 <DIO_init>:
#include "dio.h"

EN_error_state DIO_init(EN_port_t port, EN_pin_t pin, EN_direction_t direction) {
	// Set the direction of the given pin
	
	switch (port) {
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	11 f1       	breq	.+68     	; 0x34c <DIO_init+0x48>
 308:	30 f0       	brcs	.+12     	; 0x316 <DIO_init+0x12>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	e9 f1       	breq	.+122    	; 0x388 <DIO_init+0x84>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <DIO_init+0x10>
 312:	57 c0       	rjmp	.+174    	; 0x3c2 <DIO_init+0xbe>
 314:	73 c0       	rjmp	.+230    	; 0x3fc <DIO_init+0xf8>
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
 316:	41 11       	cpse	r20, r1
 318:	0d c0       	rjmp	.+26     	; 0x334 <DIO_init+0x30>
 31a:	2a b3       	in	r18, 0x1a	; 26
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_init+0x22>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_init+0x1e>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
	// Set the direction of the given pin
	
	switch (port) {
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
 334:	2a b3       	in	r18, 0x1a	; 26
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_init+0x3c>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_init+0x38>
 344:	82 2b       	or	r24, r18
 346:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
 34c:	41 11       	cpse	r20, r1
 34e:	0d c0       	rjmp	.+26     	; 0x36a <DIO_init+0x66>
 350:	27 b3       	in	r18, 0x17	; 23
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_init+0x58>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_init+0x54>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
 36a:	41 30       	cpi	r20, 0x01	; 1
 36c:	09 f0       	breq	.+2      	; 0x370 <DIO_init+0x6c>
 36e:	48 c0       	rjmp	.+144    	; 0x400 <__EEPROM_REGION_LENGTH__>
 370:	27 b3       	in	r18, 0x17	; 23
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0x78>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0x74>
 380:	82 2b       	or	r24, r18
 382:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
 388:	41 11       	cpse	r20, r1
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <DIO_init+0xa2>
 38c:	24 b3       	in	r18, 0x14	; 20
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_init+0x94>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_init+0x90>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);
 3a6:	41 30       	cpi	r20, 0x01	; 1
 3a8:	69 f5       	brne	.+90     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3aa:	24 b3       	in	r18, 0x14	; 20
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0xb2>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0xae>
 3ba:	82 2b       	or	r24, r18
 3bc:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
 3c2:	41 11       	cpse	r20, r1
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <DIO_init+0xdc>
 3c6:	21 b3       	in	r18, 0x11	; 17
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0xce>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0xca>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	91 f4       	brne	.+36     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e4:	21 b3       	in	r18, 0x11	; 17
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0xec>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0xe8>
 3f4:	82 2b       	or	r24, r18
 3f6:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);

			break;
		default:
			return ERR;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
	}
	
	return OK;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
 408:	80 e0       	ldi	r24, 0x00	; 0
}
 40a:	08 95       	ret

0000040c <DIO_write>:

EN_error_state DIO_write(EN_port_t port, EN_pin_t pin, uint8_t value) {
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	31 f1       	breq	.+76     	; 0x45c <DIO_write+0x50>
 410:	38 f0       	brcs	.+14     	; 0x420 <DIO_write+0x14>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	09 f4       	brne	.+2      	; 0x418 <DIO_write+0xc>
 416:	40 c0       	rjmp	.+128    	; 0x498 <DIO_write+0x8c>
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	09 f4       	brne	.+2      	; 0x41e <DIO_write+0x12>
 41c:	5a c0       	rjmp	.+180    	; 0x4d2 <DIO_write+0xc6>
 41e:	76 c0       	rjmp	.+236    	; 0x50c <DIO_write+0x100>
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
 420:	41 11       	cpse	r20, r1
 422:	0d c0       	rjmp	.+26     	; 0x43e <DIO_write+0x32>
 424:	2b b3       	in	r18, 0x1b	; 27
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_write+0x24>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_write+0x20>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);
 43e:	41 30       	cpi	r20, 0x01	; 1
 440:	09 f0       	breq	.+2      	; 0x444 <DIO_write+0x38>
 442:	66 c0       	rjmp	.+204    	; 0x510 <DIO_write+0x104>
 444:	2b b3       	in	r18, 0x1b	; 27
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_write+0x44>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_write+0x40>
 454:	82 2b       	or	r24, r18
 456:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
 45c:	41 11       	cpse	r20, r1
 45e:	0d c0       	rjmp	.+26     	; 0x47a <DIO_write+0x6e>
 460:	28 b3       	in	r18, 0x18	; 24
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_write+0x60>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_write+0x5c>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	09 f0       	breq	.+2      	; 0x480 <DIO_write+0x74>
 47e:	4a c0       	rjmp	.+148    	; 0x514 <DIO_write+0x108>
 480:	28 b3       	in	r18, 0x18	; 24
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x80>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x7c>
 490:	82 2b       	or	r24, r18
 492:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
 498:	41 11       	cpse	r20, r1
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <DIO_write+0xaa>
 49c:	25 b3       	in	r18, 0x15	; 21
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_write+0x9c>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_write+0x98>
 4ac:	80 95       	com	r24
 4ae:	82 23       	and	r24, r18
 4b0:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	79 f5       	brne	.+94     	; 0x518 <DIO_write+0x10c>
 4ba:	25 b3       	in	r18, 0x15	; 21
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_write+0xba>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_write+0xb6>
 4ca:	82 2b       	or	r24, r18
 4cc:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
 4d2:	41 11       	cpse	r20, r1
 4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <DIO_write+0xe4>
 4d6:	22 b3       	in	r18, 0x12	; 18
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_write+0xd6>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_write+0xd2>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	a1 f4       	brne	.+40     	; 0x51c <DIO_write+0x110>
 4f4:	22 b3       	in	r18, 0x12	; 18
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0xf4>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0xf0>
 504:	82 2b       	or	r24, r18
 506:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
			
			break;
		default:
			return ERR;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	08 95       	ret
	}
	
	return OK;
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
 51c:	80 e0       	ldi	r24, 0x00	; 0
}
 51e:	08 95       	ret

00000520 <DIO_toggle>:

EN_error_state DIO_toggle(EN_port_t port, EN_pin_t pin) {
	// Toggle the state of the given pin

	switch (port) {
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	91 f0       	breq	.+36     	; 0x548 <DIO_toggle+0x28>
 524:	28 f0       	brcs	.+10     	; 0x530 <DIO_toggle+0x10>
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	d9 f0       	breq	.+54     	; 0x560 <DIO_toggle+0x40>
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	29 f1       	breq	.+74     	; 0x578 <DIO_toggle+0x58>
 52e:	30 c0       	rjmp	.+96     	; 0x590 <DIO_toggle+0x70>
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
 530:	2b b3       	in	r18, 0x1b	; 27
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_toggle+0x1c>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_toggle+0x18>
 540:	82 27       	eor	r24, r18
 542:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 544:	80 e0       	ldi	r24, 0x00	; 0
	// Toggle the state of the given pin

	switch (port) {
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
 546:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
 548:	28 b3       	in	r18, 0x18	; 24
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_toggle+0x34>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_toggle+0x30>
 558:	82 27       	eor	r24, r18
 55a:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 55c:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
 55e:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
 560:	25 b3       	in	r18, 0x15	; 21
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_toggle+0x4c>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_toggle+0x48>
 570:	82 27       	eor	r24, r18
 572:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 574:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
 576:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
 578:	22 b3       	in	r18, 0x12	; 18
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_toggle+0x64>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_toggle+0x60>
 588:	82 27       	eor	r24, r18
 58a:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
			break;
 58e:	08 95       	ret
		default:
			return ERR;
 590:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return OK;
}
 592:	08 95       	ret

00000594 <INTERRUPTS_init>:

#include "interrupts.h"

void INTERRUPTS_init() {
	// Enable global interrupt
	sei();
 594:	78 94       	sei
	
	// Set INT0 sense to rising edge
	MCUCR |= (1 << 0) | (1 << 1);
 596:	85 b7       	in	r24, 0x35	; 53
 598:	83 60       	ori	r24, 0x03	; 3
 59a:	85 bf       	out	0x35, r24	; 53
	
	// Enable INT0
	SET_BIT(GICR, 6);
 59c:	8b b7       	in	r24, 0x3b	; 59
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	8b bf       	out	0x3b, r24	; 59
 5a2:	08 95       	ret

000005a4 <TIMER_init>:
#include "timer.h"
#include <math.h>

void TIMER_init() {
	// Set timer mode to normal
	TCCR0 = 0X00;
 5a4:	13 be       	out	0x33, r1	; 51
	
	// Set timer initial value to 0
	TCNT0 = 0x00;
 5a6:	12 be       	out	0x32, r1	; 50
 5a8:	08 95       	ret

000005aa <TIMER_start>:
}

EN_error_state TIMER_start(uint16_t prescaler, uint8_t initialValue)
{
	// Set initial value
	TCNT0 = initialValue;
 5aa:	62 bf       	out	0x32, r22	; 50
	
	// Set prescaler, after which the timer starts
	switch (prescaler) {
 5ac:	80 34       	cpi	r24, 0x40	; 64
 5ae:	91 05       	cpc	r25, r1
 5b0:	c9 f0       	breq	.+50     	; 0x5e4 <TIMER_start+0x3a>
 5b2:	30 f4       	brcc	.+12     	; 0x5c0 <TIMER_start+0x16>
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	59 f0       	breq	.+22     	; 0x5d0 <TIMER_start+0x26>
 5ba:	08 97       	sbiw	r24, 0x08	; 8
 5bc:	71 f0       	breq	.+28     	; 0x5da <TIMER_start+0x30>
 5be:	21 c0       	rjmp	.+66     	; 0x602 <TIMER_start+0x58>
 5c0:	81 15       	cp	r24, r1
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	92 07       	cpc	r25, r18
 5c6:	99 f0       	breq	.+38     	; 0x5ee <TIMER_start+0x44>
 5c8:	81 15       	cp	r24, r1
 5ca:	94 40       	sbci	r25, 0x04	; 4
 5cc:	a9 f0       	breq	.+42     	; 0x5f8 <TIMER_start+0x4e>
 5ce:	19 c0       	rjmp	.+50     	; 0x602 <TIMER_start+0x58>
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
 5d0:	83 b7       	in	r24, 0x33	; 51
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
	// Set prescaler, after which the timer starts
	switch (prescaler) {
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
			break;
 5d8:	08 95       	ret
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	82 60       	ori	r24, 0x02	; 2
 5de:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 0);
			break;
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
			break;
 5e2:	08 95       	ret
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
 5e4:	83 b7       	in	r24, 0x33	; 51
 5e6:	83 60       	ori	r24, 0x03	; 3
 5e8:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 1);
			break;
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
			break;
 5ec:	08 95       	ret
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
 5ee:	83 b7       	in	r24, 0x33	; 51
 5f0:	84 60       	ori	r24, 0x04	; 4
 5f2:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= 3;
			break;
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
			break;
 5f6:	08 95       	ret
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
 5f8:	83 b7       	in	r24, 0x33	; 51
 5fa:	85 60       	ori	r24, 0x05	; 5
 5fc:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 2);
			break;
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
			break;
 600:	08 95       	ret
		default:
			return ERR;
 602:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	
	return OK;
	
}
 604:	08 95       	ret

00000606 <TIMER_stop>:

void TIMER_stop()
{
	// Set prescaler to zero
	TCCR0 = 0x00;
 606:	13 be       	out	0x33, r1	; 51
 608:	08 95       	ret

0000060a <TIMER_delay>:
}

void TIMER_delay(float delay_in_ms, uint16_t prescaler)
{		
 60a:	8f 92       	push	r8
 60c:	9f 92       	push	r9
 60e:	af 92       	push	r10
 610:	bf 92       	push	r11
 612:	cf 92       	push	r12
 614:	df 92       	push	r13
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	6b 01       	movw	r12, r22
 624:	7c 01       	movw	r14, r24
 626:	8a 01       	movw	r16, r20
	// Timer calculations
	double clk_freq = 1000000; // 10^6
	int timer_max_count = 256; // 8^2

	double tick = ((double) prescaler / clk_freq) * 1000;
 628:	ba 01       	movw	r22, r20
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 ac 04 	call	0x958	; 0x958 <__floatunsisf>
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	34 e2       	ldi	r19, 0x24	; 36
 636:	44 e7       	ldi	r20, 0x74	; 116
 638:	59 e4       	ldi	r21, 0x49	; 73
 63a:	0e 94 04 04 	call	0x808	; 0x808 <__divsf3>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	4a e7       	ldi	r20, 0x7A	; 122
 644:	54 e4       	ldi	r21, 0x44	; 68
 646:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 64a:	4b 01       	movw	r8, r22
 64c:	5c 01       	movw	r10, r24
	double max_delay = tick * timer_max_count;
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	40 e8       	ldi	r20, 0x80	; 128
 654:	53 e4       	ldi	r21, 0x43	; 67
 656:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
	int num_overflows = (int) ceil(delay_in_ms / max_delay);
 65e:	c7 01       	movw	r24, r14
 660:	b6 01       	movw	r22, r12
 662:	0e 94 04 04 	call	0x808	; 0x808 <__divsf3>
 666:	0e 94 ed 03 	call	0x7da	; 0x7da <ceil>
 66a:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixsfsi>
 66e:	eb 01       	movw	r28, r22
	int initial_value = (int)(timer_max_count - (delay_in_ms / tick) / 2);
 670:	a5 01       	movw	r20, r10
 672:	94 01       	movw	r18, r8
 674:	c7 01       	movw	r24, r14
 676:	b6 01       	movw	r22, r12
 678:	0e 94 04 04 	call	0x808	; 0x808 <__divsf3>
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	5f e3       	ldi	r21, 0x3F	; 63
 684:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 688:	9b 01       	movw	r18, r22
 68a:	ac 01       	movw	r20, r24
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	80 e8       	ldi	r24, 0x80	; 128
 692:	93 e4       	ldi	r25, 0x43	; 67
 694:	0e 94 80 03 	call	0x700	; 0x700 <__subsf3>
 698:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fixsfsi>
	
	// Start timer and count overflows until given delay
	TIMER_start(prescaler, initial_value);
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TIMER_start>
	
	uint32_t overflow_counter = 0;
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	30 e0       	ldi	r19, 0x00	; 0
	while (overflow_counter < num_overflows)
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <TIMER_delay+0xae>
	{
		// Wait for the overflow flag to be set
		while ((TIFR & (1 << 0)) == 0) {}
 6a8:	08 b6       	in	r0, 0x38	; 56
 6aa:	00 fe       	sbrs	r0, 0
 6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <TIMER_delay+0x9e>
			
		// Clear the overflow flag
		TIFR |= (1 << 0);
 6ae:	88 b7       	in	r24, 0x38	; 56
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	88 bf       	out	0x38, r24	; 56
		
		overflow_counter++;
 6b4:	2f 5f       	subi	r18, 0xFF	; 255
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Start timer and count overflows until given delay
	TIMER_start(prescaler, initial_value);
	
	uint32_t overflow_counter = 0;
	while (overflow_counter < num_overflows)
 6b8:	2c 17       	cp	r18, r28
 6ba:	3d 07       	cpc	r19, r29
 6bc:	a8 f3       	brcs	.-22     	; 0x6a8 <TIMER_delay+0x9e>
		TIFR |= (1 << 0);
		
		overflow_counter++;
	}
	
	TIMER_stop();
 6be:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_stop>
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	bf 90       	pop	r11
 6d4:	af 90       	pop	r10
 6d6:	9f 90       	pop	r9
 6d8:	8f 90       	pop	r8
 6da:	08 95       	ret

000006dc <TIMER_delay_5s>:

void TIMER_delay_5s() {
	TIMER_delay(5000, 1024);
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	54 e0       	ldi	r21, 0x04	; 4
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	70 e4       	ldi	r23, 0x40	; 64
 6e4:	8c e9       	ldi	r24, 0x9C	; 156
 6e6:	95 e4       	ldi	r25, 0x45	; 69
 6e8:	0e 94 05 03 	call	0x60a	; 0x60a <TIMER_delay>
 6ec:	08 95       	ret

000006ee <TIMER_delay_1s>:
}

void TIMER_delay_1s() {
	TIMER_delay(1000, 1024);
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	54 e0       	ldi	r21, 0x04	; 4
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	8a e7       	ldi	r24, 0x7A	; 122
 6f8:	94 e4       	ldi	r25, 0x44	; 68
 6fa:	0e 94 05 03 	call	0x60a	; 0x60a <TIMER_delay>
 6fe:	08 95       	ret

00000700 <__subsf3>:
 700:	50 58       	subi	r21, 0x80	; 128

00000702 <__addsf3>:
 702:	bb 27       	eor	r27, r27
 704:	aa 27       	eor	r26, r26
 706:	0e 94 98 03 	call	0x730	; 0x730 <__addsf3x>
 70a:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_round>
 70e:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_pscA>
 712:	38 f0       	brcs	.+14     	; 0x722 <__addsf3+0x20>
 714:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_pscB>
 718:	20 f0       	brcs	.+8      	; 0x722 <__addsf3+0x20>
 71a:	39 f4       	brne	.+14     	; 0x72a <__addsf3+0x28>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	19 f4       	brne	.+6      	; 0x726 <__addsf3+0x24>
 720:	26 f4       	brtc	.+8      	; 0x72a <__addsf3+0x28>
 722:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_nan>
 726:	0e f4       	brtc	.+2      	; 0x72a <__addsf3+0x28>
 728:	e0 95       	com	r30
 72a:	e7 fb       	bst	r30, 7
 72c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>

00000730 <__addsf3x>:
 730:	e9 2f       	mov	r30, r25
 732:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_split3>
 736:	58 f3       	brcs	.-42     	; 0x70e <__addsf3+0xc>
 738:	ba 17       	cp	r27, r26
 73a:	62 07       	cpc	r22, r18
 73c:	73 07       	cpc	r23, r19
 73e:	84 07       	cpc	r24, r20
 740:	95 07       	cpc	r25, r21
 742:	20 f0       	brcs	.+8      	; 0x74c <__addsf3x+0x1c>
 744:	79 f4       	brne	.+30     	; 0x764 <__addsf3x+0x34>
 746:	a6 f5       	brtc	.+104    	; 0x7b0 <__addsf3x+0x80>
 748:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_zero>
 74c:	0e f4       	brtc	.+2      	; 0x750 <__addsf3x+0x20>
 74e:	e0 95       	com	r30
 750:	0b 2e       	mov	r0, r27
 752:	ba 2f       	mov	r27, r26
 754:	a0 2d       	mov	r26, r0
 756:	0b 01       	movw	r0, r22
 758:	b9 01       	movw	r22, r18
 75a:	90 01       	movw	r18, r0
 75c:	0c 01       	movw	r0, r24
 75e:	ca 01       	movw	r24, r20
 760:	a0 01       	movw	r20, r0
 762:	11 24       	eor	r1, r1
 764:	ff 27       	eor	r31, r31
 766:	59 1b       	sub	r21, r25
 768:	99 f0       	breq	.+38     	; 0x790 <__addsf3x+0x60>
 76a:	59 3f       	cpi	r21, 0xF9	; 249
 76c:	50 f4       	brcc	.+20     	; 0x782 <__addsf3x+0x52>
 76e:	50 3e       	cpi	r21, 0xE0	; 224
 770:	68 f1       	brcs	.+90     	; 0x7cc <__addsf3x+0x9c>
 772:	1a 16       	cp	r1, r26
 774:	f0 40       	sbci	r31, 0x00	; 0
 776:	a2 2f       	mov	r26, r18
 778:	23 2f       	mov	r18, r19
 77a:	34 2f       	mov	r19, r20
 77c:	44 27       	eor	r20, r20
 77e:	58 5f       	subi	r21, 0xF8	; 248
 780:	f3 cf       	rjmp	.-26     	; 0x768 <__addsf3x+0x38>
 782:	46 95       	lsr	r20
 784:	37 95       	ror	r19
 786:	27 95       	ror	r18
 788:	a7 95       	ror	r26
 78a:	f0 40       	sbci	r31, 0x00	; 0
 78c:	53 95       	inc	r21
 78e:	c9 f7       	brne	.-14     	; 0x782 <__addsf3x+0x52>
 790:	7e f4       	brtc	.+30     	; 0x7b0 <__addsf3x+0x80>
 792:	1f 16       	cp	r1, r31
 794:	ba 0b       	sbc	r27, r26
 796:	62 0b       	sbc	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	ba f0       	brmi	.+46     	; 0x7cc <__addsf3x+0x9c>
 79e:	91 50       	subi	r25, 0x01	; 1
 7a0:	a1 f0       	breq	.+40     	; 0x7ca <__addsf3x+0x9a>
 7a2:	ff 0f       	add	r31, r31
 7a4:	bb 1f       	adc	r27, r27
 7a6:	66 1f       	adc	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	c2 f7       	brpl	.-16     	; 0x79e <__addsf3x+0x6e>
 7ae:	0e c0       	rjmp	.+28     	; 0x7cc <__addsf3x+0x9c>
 7b0:	ba 0f       	add	r27, r26
 7b2:	62 1f       	adc	r22, r18
 7b4:	73 1f       	adc	r23, r19
 7b6:	84 1f       	adc	r24, r20
 7b8:	48 f4       	brcc	.+18     	; 0x7cc <__addsf3x+0x9c>
 7ba:	87 95       	ror	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f7 95       	ror	r31
 7c4:	9e 3f       	cpi	r25, 0xFE	; 254
 7c6:	08 f0       	brcs	.+2      	; 0x7ca <__addsf3x+0x9a>
 7c8:	b0 cf       	rjmp	.-160    	; 0x72a <__addsf3+0x28>
 7ca:	93 95       	inc	r25
 7cc:	88 0f       	add	r24, r24
 7ce:	08 f0       	brcs	.+2      	; 0x7d2 <__addsf3x+0xa2>
 7d0:	99 27       	eor	r25, r25
 7d2:	ee 0f       	add	r30, r30
 7d4:	97 95       	ror	r25
 7d6:	87 95       	ror	r24
 7d8:	08 95       	ret

000007da <ceil>:
 7da:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_trunc>
 7de:	90 f0       	brcs	.+36     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e0:	9f 37       	cpi	r25, 0x7F	; 127
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <ceil+0x1c>
 7e4:	91 11       	cpse	r25, r1
 7e6:	16 f4       	brtc	.+4      	; 0x7ec <ceil+0x12>
 7e8:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	80 e8       	ldi	r24, 0x80	; 128
 7f2:	9f e3       	ldi	r25, 0x3F	; 63
 7f4:	08 95       	ret
 7f6:	26 f0       	brts	.+8      	; 0x800 <__DATA_REGION_LENGTH__>
 7f8:	1b 16       	cp	r1, r27
 7fa:	61 1d       	adc	r22, r1
 7fc:	71 1d       	adc	r23, r1
 7fe:	81 1d       	adc	r24, r1
 800:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_mintl>
 804:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_mpack>

00000808 <__divsf3>:
 808:	0e 94 18 04 	call	0x830	; 0x830 <__divsf3x>
 80c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_round>
 810:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_pscB>
 814:	58 f0       	brcs	.+22     	; 0x82c <__divsf3+0x24>
 816:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_pscA>
 81a:	40 f0       	brcs	.+16     	; 0x82c <__divsf3+0x24>
 81c:	29 f4       	brne	.+10     	; 0x828 <__divsf3+0x20>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	29 f0       	breq	.+10     	; 0x82c <__divsf3+0x24>
 822:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 826:	51 11       	cpse	r21, r1
 828:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 82c:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_nan>

00000830 <__divsf3x>:
 830:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_split3>
 834:	68 f3       	brcs	.-38     	; 0x810 <__divsf3+0x8>

00000836 <__divsf3_pse>:
 836:	99 23       	and	r25, r25
 838:	b1 f3       	breq	.-20     	; 0x826 <__divsf3+0x1e>
 83a:	55 23       	and	r21, r21
 83c:	91 f3       	breq	.-28     	; 0x822 <__divsf3+0x1a>
 83e:	95 1b       	sub	r25, r21
 840:	55 0b       	sbc	r21, r21
 842:	bb 27       	eor	r27, r27
 844:	aa 27       	eor	r26, r26
 846:	62 17       	cp	r22, r18
 848:	73 07       	cpc	r23, r19
 84a:	84 07       	cpc	r24, r20
 84c:	38 f0       	brcs	.+14     	; 0x85c <__divsf3_pse+0x26>
 84e:	9f 5f       	subi	r25, 0xFF	; 255
 850:	5f 4f       	sbci	r21, 0xFF	; 255
 852:	22 0f       	add	r18, r18
 854:	33 1f       	adc	r19, r19
 856:	44 1f       	adc	r20, r20
 858:	aa 1f       	adc	r26, r26
 85a:	a9 f3       	breq	.-22     	; 0x846 <__divsf3_pse+0x10>
 85c:	35 d0       	rcall	.+106    	; 0x8c8 <__stack+0x69>
 85e:	0e 2e       	mov	r0, r30
 860:	3a f0       	brmi	.+14     	; 0x870 <__stack+0x11>
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	32 d0       	rcall	.+100    	; 0x8ca <__stack+0x6b>
 866:	91 50       	subi	r25, 0x01	; 1
 868:	50 40       	sbci	r21, 0x00	; 0
 86a:	e6 95       	lsr	r30
 86c:	00 1c       	adc	r0, r0
 86e:	ca f7       	brpl	.-14     	; 0x862 <__stack+0x3>
 870:	2b d0       	rcall	.+86     	; 0x8c8 <__stack+0x69>
 872:	fe 2f       	mov	r31, r30
 874:	29 d0       	rcall	.+82     	; 0x8c8 <__stack+0x69>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	bb 1f       	adc	r27, r27
 87e:	26 17       	cp	r18, r22
 880:	37 07       	cpc	r19, r23
 882:	48 07       	cpc	r20, r24
 884:	ab 07       	cpc	r26, r27
 886:	b0 e8       	ldi	r27, 0x80	; 128
 888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
 88a:	bb 0b       	sbc	r27, r27
 88c:	80 2d       	mov	r24, r0
 88e:	bf 01       	movw	r22, r30
 890:	ff 27       	eor	r31, r31
 892:	93 58       	subi	r25, 0x83	; 131
 894:	5f 4f       	sbci	r21, 0xFF	; 255
 896:	3a f0       	brmi	.+14     	; 0x8a6 <__stack+0x47>
 898:	9e 3f       	cpi	r25, 0xFE	; 254
 89a:	51 05       	cpc	r21, r1
 89c:	78 f0       	brcs	.+30     	; 0x8bc <__stack+0x5d>
 89e:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 8a2:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	e4 f3       	brlt	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	98 3e       	cpi	r25, 0xE8	; 232
 8ac:	d4 f3       	brlt	.-12     	; 0x8a2 <__stack+0x43>
 8ae:	86 95       	lsr	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	9f 5f       	subi	r25, 0xFF	; 255
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__stack+0x4f>
 8bc:	88 0f       	add	r24, r24
 8be:	91 1d       	adc	r25, r1
 8c0:	96 95       	lsr	r25
 8c2:	87 95       	ror	r24
 8c4:	97 f9       	bld	r25, 7
 8c6:	08 95       	ret
 8c8:	e1 e0       	ldi	r30, 0x01	; 1
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	bb 1f       	adc	r27, r27
 8d2:	62 17       	cp	r22, r18
 8d4:	73 07       	cpc	r23, r19
 8d6:	84 07       	cpc	r24, r20
 8d8:	ba 07       	cpc	r27, r26
 8da:	20 f0       	brcs	.+8      	; 0x8e4 <__stack+0x85>
 8dc:	62 1b       	sub	r22, r18
 8de:	73 0b       	sbc	r23, r19
 8e0:	84 0b       	sbc	r24, r20
 8e2:	ba 0b       	sbc	r27, r26
 8e4:	ee 1f       	adc	r30, r30
 8e6:	88 f7       	brcc	.-30     	; 0x8ca <__stack+0x6b>
 8e8:	e0 95       	com	r30
 8ea:	08 95       	ret

000008ec <__fixsfsi>:
 8ec:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__fixunssfsi>
 8f0:	68 94       	set
 8f2:	b1 11       	cpse	r27, r1
 8f4:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 8f8:	08 95       	ret

000008fa <__fixunssfsi>:
 8fa:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_splitA>
 8fe:	88 f0       	brcs	.+34     	; 0x922 <__fixunssfsi+0x28>
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	98 f0       	brcs	.+38     	; 0x92a <__fixunssfsi+0x30>
 904:	b9 2f       	mov	r27, r25
 906:	99 27       	eor	r25, r25
 908:	b7 51       	subi	r27, 0x17	; 23
 90a:	b0 f0       	brcs	.+44     	; 0x938 <__fixunssfsi+0x3e>
 90c:	e1 f0       	breq	.+56     	; 0x946 <__fixunssfsi+0x4c>
 90e:	66 0f       	add	r22, r22
 910:	77 1f       	adc	r23, r23
 912:	88 1f       	adc	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	1a f0       	brmi	.+6      	; 0x91e <__fixunssfsi+0x24>
 918:	ba 95       	dec	r27
 91a:	c9 f7       	brne	.-14     	; 0x90e <__fixunssfsi+0x14>
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__fixunssfsi+0x4c>
 91e:	b1 30       	cpi	r27, 0x01	; 1
 920:	91 f0       	breq	.+36     	; 0x946 <__fixunssfsi+0x4c>
 922:	0e 94 74 05 	call	0xae8	; 0xae8 <__fp_zero>
 926:	b1 e0       	ldi	r27, 0x01	; 1
 928:	08 95       	ret
 92a:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_zero>
 92e:	67 2f       	mov	r22, r23
 930:	78 2f       	mov	r23, r24
 932:	88 27       	eor	r24, r24
 934:	b8 5f       	subi	r27, 0xF8	; 248
 936:	39 f0       	breq	.+14     	; 0x946 <__fixunssfsi+0x4c>
 938:	b9 3f       	cpi	r27, 0xF9	; 249
 93a:	cc f3       	brlt	.-14     	; 0x92e <__fixunssfsi+0x34>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b3 95       	inc	r27
 944:	d9 f7       	brne	.-10     	; 0x93c <__fixunssfsi+0x42>
 946:	3e f4       	brtc	.+14     	; 0x956 <__fixunssfsi+0x5c>
 948:	90 95       	com	r25
 94a:	80 95       	com	r24
 94c:	70 95       	com	r23
 94e:	61 95       	neg	r22
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	08 95       	ret

00000958 <__floatunsisf>:
 958:	e8 94       	clt
 95a:	09 c0       	rjmp	.+18     	; 0x96e <__floatsisf+0x12>

0000095c <__floatsisf>:
 95c:	97 fb       	bst	r25, 7
 95e:	3e f4       	brtc	.+14     	; 0x96e <__floatsisf+0x12>
 960:	90 95       	com	r25
 962:	80 95       	com	r24
 964:	70 95       	com	r23
 966:	61 95       	neg	r22
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	99 23       	and	r25, r25
 970:	a9 f0       	breq	.+42     	; 0x99c <__floatsisf+0x40>
 972:	f9 2f       	mov	r31, r25
 974:	96 e9       	ldi	r25, 0x96	; 150
 976:	bb 27       	eor	r27, r27
 978:	93 95       	inc	r25
 97a:	f6 95       	lsr	r31
 97c:	87 95       	ror	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f1 11       	cpse	r31, r1
 986:	f8 cf       	rjmp	.-16     	; 0x978 <__floatsisf+0x1c>
 988:	fa f4       	brpl	.+62     	; 0x9c8 <__floatsisf+0x6c>
 98a:	bb 0f       	add	r27, r27
 98c:	11 f4       	brne	.+4      	; 0x992 <__floatsisf+0x36>
 98e:	60 ff       	sbrs	r22, 0
 990:	1b c0       	rjmp	.+54     	; 0x9c8 <__floatsisf+0x6c>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__floatsisf+0x6c>
 99c:	88 23       	and	r24, r24
 99e:	11 f0       	breq	.+4      	; 0x9a4 <__floatsisf+0x48>
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__floatsisf+0x6a>
 9a4:	77 23       	and	r23, r23
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <__floatsisf+0x54>
 9a8:	9e e8       	ldi	r25, 0x8E	; 142
 9aa:	87 2f       	mov	r24, r23
 9ac:	76 2f       	mov	r23, r22
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__floatsisf+0x5e>
 9b0:	66 23       	and	r22, r22
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__floatsisf+0x74>
 9b4:	96 e8       	ldi	r25, 0x86	; 134
 9b6:	86 2f       	mov	r24, r22
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	2a f0       	brmi	.+10     	; 0x9c8 <__floatsisf+0x6c>
 9be:	9a 95       	dec	r25
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	da f7       	brpl	.-10     	; 0x9be <__floatsisf+0x62>
 9c8:	88 0f       	add	r24, r24
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <__fp_inf>:
 9d2:	97 f9       	bld	r25, 7
 9d4:	9f 67       	ori	r25, 0x7F	; 127
 9d6:	80 e8       	ldi	r24, 0x80	; 128
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	08 95       	ret

000009de <__fp_mintl>:
 9de:	88 23       	and	r24, r24
 9e0:	71 f4       	brne	.+28     	; 0x9fe <__fp_mintl+0x20>
 9e2:	77 23       	and	r23, r23
 9e4:	21 f0       	breq	.+8      	; 0x9ee <__fp_mintl+0x10>
 9e6:	98 50       	subi	r25, 0x08	; 8
 9e8:	87 2b       	or	r24, r23
 9ea:	76 2f       	mov	r23, r22
 9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__fp_mintl+0x1e>
 9ee:	66 23       	and	r22, r22
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_mintl+0x18>
 9f2:	99 27       	eor	r25, r25
 9f4:	0d c0       	rjmp	.+26     	; 0xa10 <__fp_mintl+0x32>
 9f6:	90 51       	subi	r25, 0x10	; 16
 9f8:	86 2b       	or	r24, r22
 9fa:	70 e0       	ldi	r23, 0x00	; 0
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	2a f0       	brmi	.+10     	; 0xa0a <__fp_mintl+0x2c>
 a00:	9a 95       	dec	r25
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	da f7       	brpl	.-10     	; 0xa00 <__fp_mintl+0x22>
 a0a:	88 0f       	add	r24, r24
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	97 f9       	bld	r25, 7
 a12:	08 95       	ret

00000a14 <__fp_mpack>:
 a14:	9f 3f       	cpi	r25, 0xFF	; 255
 a16:	31 f0       	breq	.+12     	; 0xa24 <__fp_mpack_finite+0xc>

00000a18 <__fp_mpack_finite>:
 a18:	91 50       	subi	r25, 0x01	; 1
 a1a:	20 f4       	brcc	.+8      	; 0xa24 <__fp_mpack_finite+0xc>
 a1c:	87 95       	ror	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	b7 95       	ror	r27
 a24:	88 0f       	add	r24, r24
 a26:	91 1d       	adc	r25, r1
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret

00000a30 <__fp_nan>:
 a30:	9f ef       	ldi	r25, 0xFF	; 255
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	08 95       	ret

00000a36 <__fp_pscA>:
 a36:	00 24       	eor	r0, r0
 a38:	0a 94       	dec	r0
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	18 06       	cpc	r1, r24
 a40:	09 06       	cpc	r0, r25
 a42:	08 95       	ret

00000a44 <__fp_pscB>:
 a44:	00 24       	eor	r0, r0
 a46:	0a 94       	dec	r0
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	14 06       	cpc	r1, r20
 a4e:	05 06       	cpc	r0, r21
 a50:	08 95       	ret

00000a52 <__fp_round>:
 a52:	09 2e       	mov	r0, r25
 a54:	03 94       	inc	r0
 a56:	00 0c       	add	r0, r0
 a58:	11 f4       	brne	.+4      	; 0xa5e <__fp_round+0xc>
 a5a:	88 23       	and	r24, r24
 a5c:	52 f0       	brmi	.+20     	; 0xa72 <__fp_round+0x20>
 a5e:	bb 0f       	add	r27, r27
 a60:	40 f4       	brcc	.+16     	; 0xa72 <__fp_round+0x20>
 a62:	bf 2b       	or	r27, r31
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0x18>
 a66:	60 ff       	sbrs	r22, 0
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <__fp_round+0x20>
 a6a:	6f 5f       	subi	r22, 0xFF	; 255
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255
 a6e:	8f 4f       	sbci	r24, 0xFF	; 255
 a70:	9f 4f       	sbci	r25, 0xFF	; 255
 a72:	08 95       	ret

00000a74 <__fp_split3>:
 a74:	57 fd       	sbrc	r21, 7
 a76:	90 58       	subi	r25, 0x80	; 128
 a78:	44 0f       	add	r20, r20
 a7a:	55 1f       	adc	r21, r21
 a7c:	59 f0       	breq	.+22     	; 0xa94 <__fp_splitA+0x10>
 a7e:	5f 3f       	cpi	r21, 0xFF	; 255
 a80:	71 f0       	breq	.+28     	; 0xa9e <__fp_splitA+0x1a>
 a82:	47 95       	ror	r20

00000a84 <__fp_splitA>:
 a84:	88 0f       	add	r24, r24
 a86:	97 fb       	bst	r25, 7
 a88:	99 1f       	adc	r25, r25
 a8a:	61 f0       	breq	.+24     	; 0xaa4 <__fp_splitA+0x20>
 a8c:	9f 3f       	cpi	r25, 0xFF	; 255
 a8e:	79 f0       	breq	.+30     	; 0xaae <__fp_splitA+0x2a>
 a90:	87 95       	ror	r24
 a92:	08 95       	ret
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	55 1f       	adc	r21, r21
 a9c:	f2 cf       	rjmp	.-28     	; 0xa82 <__fp_split3+0xe>
 a9e:	46 95       	lsr	r20
 aa0:	f1 df       	rcall	.-30     	; 0xa84 <__fp_splitA>
 aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__fp_splitA+0x30>
 aa4:	16 16       	cp	r1, r22
 aa6:	17 06       	cpc	r1, r23
 aa8:	18 06       	cpc	r1, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	f1 cf       	rjmp	.-30     	; 0xa90 <__fp_splitA+0xc>
 aae:	86 95       	lsr	r24
 ab0:	71 05       	cpc	r23, r1
 ab2:	61 05       	cpc	r22, r1
 ab4:	08 94       	sec
 ab6:	08 95       	ret

00000ab8 <__fp_trunc>:
 ab8:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_splitA>
 abc:	a0 f0       	brcs	.+40     	; 0xae6 <__fp_trunc+0x2e>
 abe:	be e7       	ldi	r27, 0x7E	; 126
 ac0:	b9 17       	cp	r27, r25
 ac2:	88 f4       	brcc	.+34     	; 0xae6 <__fp_trunc+0x2e>
 ac4:	bb 27       	eor	r27, r27
 ac6:	9f 38       	cpi	r25, 0x8F	; 143
 ac8:	60 f4       	brcc	.+24     	; 0xae2 <__fp_trunc+0x2a>
 aca:	16 16       	cp	r1, r22
 acc:	b1 1d       	adc	r27, r1
 ace:	67 2f       	mov	r22, r23
 ad0:	78 2f       	mov	r23, r24
 ad2:	88 27       	eor	r24, r24
 ad4:	98 5f       	subi	r25, 0xF8	; 248
 ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <__fp_trunc+0xe>
 ad8:	86 95       	lsr	r24
 ada:	77 95       	ror	r23
 adc:	67 95       	ror	r22
 ade:	b1 1d       	adc	r27, r1
 ae0:	93 95       	inc	r25
 ae2:	96 39       	cpi	r25, 0x96	; 150
 ae4:	c8 f3       	brcs	.-14     	; 0xad8 <__fp_trunc+0x20>
 ae6:	08 95       	ret

00000ae8 <__fp_zero>:
 ae8:	e8 94       	clt

00000aea <__fp_szero>:
 aea:	bb 27       	eor	r27, r27
 aec:	66 27       	eor	r22, r22
 aee:	77 27       	eor	r23, r23
 af0:	cb 01       	movw	r24, r22
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__mulsf3>:
 af6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3x>
 afa:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_round>
 afe:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_pscA>
 b02:	38 f0       	brcs	.+14     	; 0xb12 <__mulsf3+0x1c>
 b04:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_pscB>
 b08:	20 f0       	brcs	.+8      	; 0xb12 <__mulsf3+0x1c>
 b0a:	95 23       	and	r25, r21
 b0c:	11 f0       	breq	.+4      	; 0xb12 <__mulsf3+0x1c>
 b0e:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 b12:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_nan>
 b16:	11 24       	eor	r1, r1
 b18:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>

00000b1c <__mulsf3x>:
 b1c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_split3>
 b20:	70 f3       	brcs	.-36     	; 0xafe <__mulsf3+0x8>

00000b22 <__mulsf3_pse>:
 b22:	95 9f       	mul	r25, r21
 b24:	c1 f3       	breq	.-16     	; 0xb16 <__mulsf3+0x20>
 b26:	95 0f       	add	r25, r21
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	55 1f       	adc	r21, r21
 b2c:	62 9f       	mul	r22, r18
 b2e:	f0 01       	movw	r30, r0
 b30:	72 9f       	mul	r23, r18
 b32:	bb 27       	eor	r27, r27
 b34:	f0 0d       	add	r31, r0
 b36:	b1 1d       	adc	r27, r1
 b38:	63 9f       	mul	r22, r19
 b3a:	aa 27       	eor	r26, r26
 b3c:	f0 0d       	add	r31, r0
 b3e:	b1 1d       	adc	r27, r1
 b40:	aa 1f       	adc	r26, r26
 b42:	64 9f       	mul	r22, r20
 b44:	66 27       	eor	r22, r22
 b46:	b0 0d       	add	r27, r0
 b48:	a1 1d       	adc	r26, r1
 b4a:	66 1f       	adc	r22, r22
 b4c:	82 9f       	mul	r24, r18
 b4e:	22 27       	eor	r18, r18
 b50:	b0 0d       	add	r27, r0
 b52:	a1 1d       	adc	r26, r1
 b54:	62 1f       	adc	r22, r18
 b56:	73 9f       	mul	r23, r19
 b58:	b0 0d       	add	r27, r0
 b5a:	a1 1d       	adc	r26, r1
 b5c:	62 1f       	adc	r22, r18
 b5e:	83 9f       	mul	r24, r19
 b60:	a0 0d       	add	r26, r0
 b62:	61 1d       	adc	r22, r1
 b64:	22 1f       	adc	r18, r18
 b66:	74 9f       	mul	r23, r20
 b68:	33 27       	eor	r19, r19
 b6a:	a0 0d       	add	r26, r0
 b6c:	61 1d       	adc	r22, r1
 b6e:	23 1f       	adc	r18, r19
 b70:	84 9f       	mul	r24, r20
 b72:	60 0d       	add	r22, r0
 b74:	21 1d       	adc	r18, r1
 b76:	82 2f       	mov	r24, r18
 b78:	76 2f       	mov	r23, r22
 b7a:	6a 2f       	mov	r22, r26
 b7c:	11 24       	eor	r1, r1
 b7e:	9f 57       	subi	r25, 0x7F	; 127
 b80:	50 40       	sbci	r21, 0x00	; 0
 b82:	9a f0       	brmi	.+38     	; 0xbaa <__mulsf3_pse+0x88>
 b84:	f1 f0       	breq	.+60     	; 0xbc2 <__mulsf3_pse+0xa0>
 b86:	88 23       	and	r24, r24
 b88:	4a f0       	brmi	.+18     	; 0xb9c <__mulsf3_pse+0x7a>
 b8a:	ee 0f       	add	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	bb 1f       	adc	r27, r27
 b90:	66 1f       	adc	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	91 50       	subi	r25, 0x01	; 1
 b98:	50 40       	sbci	r21, 0x00	; 0
 b9a:	a9 f7       	brne	.-22     	; 0xb86 <__mulsf3_pse+0x64>
 b9c:	9e 3f       	cpi	r25, 0xFE	; 254
 b9e:	51 05       	cpc	r21, r1
 ba0:	80 f0       	brcs	.+32     	; 0xbc2 <__mulsf3_pse+0xa0>
 ba2:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_inf>
 ba6:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 baa:	5f 3f       	cpi	r21, 0xFF	; 255
 bac:	e4 f3       	brlt	.-8      	; 0xba6 <__mulsf3_pse+0x84>
 bae:	98 3e       	cpi	r25, 0xE8	; 232
 bb0:	d4 f3       	brlt	.-12     	; 0xba6 <__mulsf3_pse+0x84>
 bb2:	86 95       	lsr	r24
 bb4:	77 95       	ror	r23
 bb6:	67 95       	ror	r22
 bb8:	b7 95       	ror	r27
 bba:	f7 95       	ror	r31
 bbc:	e7 95       	ror	r30
 bbe:	9f 5f       	subi	r25, 0xFF	; 255
 bc0:	c1 f7       	brne	.-16     	; 0xbb2 <__mulsf3_pse+0x90>
 bc2:	fe 2b       	or	r31, r30
 bc4:	88 0f       	add	r24, r24
 bc6:	91 1d       	adc	r25, r1
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <_exit>:
 bd0:	f8 94       	cli

00000bd2 <__stop_program>:
 bd2:	ff cf       	rjmp	.-2      	; 0xbd2 <__stop_program>
