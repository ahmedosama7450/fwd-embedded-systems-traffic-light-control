
fwd-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000be4  00000c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000c7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c9  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c58  00000000  00000000  00002cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  000041ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8a:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normalMode>:
uint8_t wasRedLedOn = 0;
uint8_t buttonPressed = 0;

void normalMode() {
	// For pedestrians, turn on red
	LED_on_only(LED_PEDESTRIANS_PORT, LED_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>

	// For cars, turn on green at first
	LED_on_only(LED_CARS_PORT, LED_GREEN_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>
	TIMER_delay_5s();
  a2:	0e 94 76 03 	call	0x6ec	; 0x6ec <TIMER_delay_5s>
	wasRedLedOn = 0;
  a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ae:	81 11       	cpse	r24, r1
  b0:	19 c0       	rjmp	.+50     	; 0xe4 <normalMode+0x52>

	// Then, blink yellow
	LED_off(LED_CARS_PORT, LED_GREEN_PIN);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
	LED_blink(LED_CARS_PORT, LED_YELLOW_PIN);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 1a 01 	call	0x234	; 0x234 <LED_blink>
	wasRedLedOn = 0;
  c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	81 11       	cpse	r24, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <normalMode+0x52>

	// Lastly, turn on red
	LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
	LED_on(LED_CARS_PORT, LED_RED_PIN);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	TIMER_delay_5s();
  da:	0e 94 76 03 	call	0x6ec	; 0x6ec <TIMER_delay_5s>
	wasRedLedOn = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <wasRedLedOn>
  e4:	08 95       	ret

000000e6 <pedestrianMode>:
	if(buttonPressed) return;
}

void pedestrianMode() {
	if(wasRedLedOn) {
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <wasRedLedOn>
  ea:	88 23       	and	r24, r24
  ec:	49 f0       	breq	.+18     	; 0x100 <pedestrianMode+0x1a>
		// For cars, turn on red
		LED_on_only(LED_CARS_PORT, LED_RED_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>

		// For pedestrians, turn on green
		LED_on_only(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>
  fe:	26 c0       	rjmp	.+76     	; 0x14c <pedestrianMode+0x66>
	} else {
		// For cars and pedestrians, blink both yellow
		LED_off(LED_CARS_PORT, LED_RED_PIN);
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_off(LED_CARS_PORT, LED_GREEN_PIN);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>

		LED_off(LED_PEDESTRIANS_PORT, LED_RED_PIN);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		
		LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 34 01 	call	0x268	; 0x268 <LED_double_blink>
				
		// The, turn on cars red led and pedestrians green led
		LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_on(LED_CARS_PORT, LED_RED_PIN);
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>

		LED_off(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_on(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	}
	
	TIMER_delay_5s();
 14c:	0e 94 76 03 	call	0x6ec	; 0x6ec <TIMER_delay_5s>
	
	// Blink both yellow
	LED_off(LED_CARS_PORT, LED_RED_PIN);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
	// LED_off(LED_PEDESTRIANS_PORT, LED_GREEN_PIN); // TODO: Maybe we should uncomment this line
	
	LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 34 01 	call	0x268	; 0x268 <LED_double_blink>
	
	// End pedestrian mode, turn off pedestrian green
	LED_on_only(LED_PEDESTRIANS_PORT, LED_RED_PIN);
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>
	LED_on_only(LED_CARS_PORT, LED_GREEN_PIN);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LED_on_only>
	
	isNormalMode = 1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	wasRedLedOn = 0;
 17a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	buttonPressed = 0;
 17e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 182:	08 95       	ret

00000184 <APP_init>:
}

void APP_init() {
	LEDS_init();
 184:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LEDS_init>
	BUTTON_init();
 188:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <BUTTON_init>
	TIMER_init();
 18c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TIMER_init>
	INTERRUPTS_init();
 190:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <INTERRUPTS_init>
 194:	08 95       	ret

00000196 <APP_start>:
}

void APP_start() {
	if(isNormalMode) {
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	88 23       	and	r24, r24
 19c:	19 f0       	breq	.+6      	; 0x1a4 <APP_start+0xe>
		normalMode();
 19e:	0e 94 49 00 	call	0x92	; 0x92 <normalMode>
 1a2:	08 95       	ret
	} else {
		pedestrianMode();
 1a4:	0e 94 73 00 	call	0xe6	; 0xe6 <pedestrianMode>
 1a8:	08 95       	ret

000001aa <__vector_1>:
	}
}

ISR(EXT_INT_0) {
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	if(!buttonPressed) {
 1b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ba:	81 11       	cpse	r24, r1
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <__vector_1+0x1e>
		isNormalMode = 0;
 1be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		buttonPressed = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
}
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <BUTTON_init>:
 */ 

#include "button.h"

void BUTTON_init() {
	DIO_init(BUTTON_PORT, BUTTON_PIN, IN);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
 1de:	08 95       	ret

000001e0 <LEDS_init>:
 */ 

#include "led.h"

void LEDS_init() {
	DIO_init(LED_CARS_PORT, LED_RED_PIN, OUT);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_YELLOW_PIN, OUT);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_GREEN_PIN, OUT);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>

	DIO_init(LED_PEDESTRIANS_PORT, LED_RED_PIN, OUT);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN, OUT);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_GREEN_PIN, OUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 8a 01 	call	0x314	; 0x314 <DIO_init>
 21c:	08 95       	ret

0000021e <LED_on>:
}

void LED_on(EN_port_t port, EN_pin_t pin) {
	DIO_write(port, pin, HIGH);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_write>
 224:	08 95       	ret

00000226 <LED_off>:
}

void LED_off(EN_port_t port, EN_pin_t pin) {
	DIO_write(port, pin, LOW);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_write>
 22c:	08 95       	ret

0000022e <LED_toggle>:
}

void LED_toggle(EN_port_t port, EN_pin_t pin) {
	DIO_toggle(port, pin);
 22e:	0e 94 98 02 	call	0x530	; 0x530 <DIO_toggle>
 232:	08 95       	ret

00000234 <LED_blink>:
}

void LED_blink(EN_port_t port, EN_pin_t pin) {
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	18 2f       	mov	r17, r24
 23e:	06 2f       	mov	r16, r22
	LED_on(port, pin);
 240:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	for(int i = 0; i < 5; i++) {
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d0 e0       	ldi	r29, 0x00	; 0
 248:	07 c0       	rjmp	.+14     	; 0x258 <LED_blink+0x24>
		TIMER_delay_1s();
 24a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_delay_1s>
		LED_toggle(port, pin);
 24e:	60 2f       	mov	r22, r16
 250:	81 2f       	mov	r24, r17
 252:	0e 94 17 01 	call	0x22e	; 0x22e <LED_toggle>
	DIO_toggle(port, pin);
}

void LED_blink(EN_port_t port, EN_pin_t pin) {
	LED_on(port, pin);
	for(int i = 0; i < 5; i++) {
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	c5 30       	cpi	r28, 0x05	; 5
 25a:	d1 05       	cpc	r29, r1
 25c:	b4 f3       	brlt	.-20     	; 0x24a <LED_blink+0x16>
		TIMER_delay_1s();
		LED_toggle(port, pin);
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <LED_double_blink>:

void LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	f8 2e       	mov	r15, r24
 276:	e6 2e       	mov	r14, r22
 278:	14 2f       	mov	r17, r20
 27a:	02 2f       	mov	r16, r18
	LED_on(port1, pin1);
 27c:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	LED_on(port2, pin2);
 280:	60 2f       	mov	r22, r16
 282:	81 2f       	mov	r24, r17
 284:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	for(int i = 0; i < 5; i++) {
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <LED_double_blink+0x3c>
		TIMER_delay_1s();
 28e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <TIMER_delay_1s>
		LED_toggle(port1, pin1);
 292:	6e 2d       	mov	r22, r14
 294:	8f 2d       	mov	r24, r15
 296:	0e 94 17 01 	call	0x22e	; 0x22e <LED_toggle>
		LED_toggle(port2, pin2);
 29a:	60 2f       	mov	r22, r16
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 17 01 	call	0x22e	; 0x22e <LED_toggle>
}

void LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
	LED_on(port1, pin1);
	LED_on(port2, pin2);
	for(int i = 0; i < 5; i++) {
 2a2:	21 96       	adiw	r28, 0x01	; 1
 2a4:	c5 30       	cpi	r28, 0x05	; 5
 2a6:	d1 05       	cpc	r29, r1
 2a8:	94 f3       	brlt	.-28     	; 0x28e <LED_double_blink+0x26>
		TIMER_delay_1s();
		LED_toggle(port1, pin1);
		LED_toggle(port2, pin2);
	}
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	08 95       	ret

000002b8 <LED_on_only>:

void LED_on_only(EN_port_t port, EN_pin_t pin) {
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	d8 2f       	mov	r29, r24
 2be:	c6 2f       	mov	r28, r22
	LED_on(port, pin);
 2c0:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on>
	if(pin == LED_RED_PIN) {
 2c4:	c2 30       	cpi	r28, 0x02	; 2
 2c6:	49 f4       	brne	.+18     	; 0x2da <LED_on_only+0x22>
		LED_off(port, LED_GREEN_PIN);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	8d 2f       	mov	r24, r29
 2cc:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_off(port, LED_YELLOW_PIN); 
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	8d 2f       	mov	r24, r29
 2d4:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
 2d8:	15 c0       	rjmp	.+42     	; 0x304 <LED_on_only+0x4c>
	} else if(pin == LED_GREEN_PIN) {
 2da:	c1 11       	cpse	r28, r1
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <LED_on_only+0x38>
		LED_off(port, LED_RED_PIN); 
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	8d 2f       	mov	r24, r29
 2e2:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_off(port, LED_YELLOW_PIN); 
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	8d 2f       	mov	r24, r29
 2ea:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
 2ee:	0a c0       	rjmp	.+20     	; 0x304 <LED_on_only+0x4c>
	} else if(pin == LED_YELLOW_PIN) {
 2f0:	c1 30       	cpi	r28, 0x01	; 1
 2f2:	41 f4       	brne	.+16     	; 0x304 <LED_on_only+0x4c>
		LED_off(port, LED_RED_PIN);
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	8d 2f       	mov	r24, r29
 2f8:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
		LED_off(port, LED_GREEN_PIN); 
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	8d 2f       	mov	r24, r29
 300:	0e 94 13 01 	call	0x226	; 0x226 <LED_off>
	}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <main>:

#include "./Application/app.h"

int main(void)
{
	APP_init();
 30a:	0e 94 c2 00 	call	0x184	; 0x184 <APP_init>
	
	while(1) {
		APP_start();
 30e:	0e 94 cb 00 	call	0x196	; 0x196 <APP_start>
 312:	fd cf       	rjmp	.-6      	; 0x30e <main+0x4>

00000314 <DIO_init>:
#include "dio.h"

EN_error_state DIO_init(EN_port_t port, EN_pin_t pin, EN_direction_t direction) {
	// Set the direction of the given pin
	
	switch (port) {
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	11 f1       	breq	.+68     	; 0x35c <DIO_init+0x48>
 318:	30 f0       	brcs	.+12     	; 0x326 <DIO_init+0x12>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	e9 f1       	breq	.+122    	; 0x398 <DIO_init+0x84>
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	09 f4       	brne	.+2      	; 0x324 <DIO_init+0x10>
 322:	57 c0       	rjmp	.+174    	; 0x3d2 <DIO_init+0xbe>
 324:	73 c0       	rjmp	.+230    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
 326:	41 11       	cpse	r20, r1
 328:	0d c0       	rjmp	.+26     	; 0x344 <DIO_init+0x30>
 32a:	2a b3       	in	r18, 0x1a	; 26
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_init+0x22>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_init+0x1e>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	08 95       	ret
	// Set the direction of the given pin
	
	switch (port) {
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
 344:	2a b3       	in	r18, 0x1a	; 26
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_init+0x3c>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_init+0x38>
 354:	82 2b       	or	r24, r18
 356:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
 35c:	41 11       	cpse	r20, r1
 35e:	0d c0       	rjmp	.+26     	; 0x37a <DIO_init+0x66>
 360:	27 b3       	in	r18, 0x17	; 23
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_init+0x58>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_init+0x54>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <DIO_init+0x6c>
 37e:	48 c0       	rjmp	.+144    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 380:	27 b3       	in	r18, 0x17	; 23
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_init+0x78>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_init+0x74>
 390:	82 2b       	or	r24, r18
 392:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
 398:	41 11       	cpse	r20, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <DIO_init+0xa2>
 39c:	24 b3       	in	r18, 0x14	; 20
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_init+0x94>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_init+0x90>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	69 f5       	brne	.+90     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3ba:	24 b3       	in	r18, 0x14	; 20
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0xb2>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0xae>
 3ca:	82 2b       	or	r24, r18
 3cc:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
 3d2:	41 11       	cpse	r20, r1
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <DIO_init+0xdc>
 3d6:	21 b3       	in	r18, 0x11	; 17
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_init+0xce>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_init+0xca>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	91 f4       	brne	.+36     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3f4:	21 b3       	in	r18, 0x11	; 17
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_init+0xe8>
 404:	82 2b       	or	r24, r18
 406:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);

			break;
		default:
			return ERR;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
	}
	
	return OK;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	80 e0       	ldi	r24, 0x00	; 0
}
 41a:	08 95       	ret

0000041c <DIO_write>:

EN_error_state DIO_write(EN_port_t port, EN_pin_t pin, uint8_t value) {
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	31 f1       	breq	.+76     	; 0x46c <DIO_write+0x50>
 420:	38 f0       	brcs	.+14     	; 0x430 <DIO_write+0x14>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_write+0xc>
 426:	40 c0       	rjmp	.+128    	; 0x4a8 <DIO_write+0x8c>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	09 f4       	brne	.+2      	; 0x42e <DIO_write+0x12>
 42c:	5a c0       	rjmp	.+180    	; 0x4e2 <DIO_write+0xc6>
 42e:	76 c0       	rjmp	.+236    	; 0x51c <DIO_write+0x100>
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
 430:	41 11       	cpse	r20, r1
 432:	0d c0       	rjmp	.+26     	; 0x44e <DIO_write+0x32>
 434:	2b b3       	in	r18, 0x1b	; 27
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_write+0x24>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_write+0x20>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);
 44e:	41 30       	cpi	r20, 0x01	; 1
 450:	09 f0       	breq	.+2      	; 0x454 <DIO_write+0x38>
 452:	66 c0       	rjmp	.+204    	; 0x520 <DIO_write+0x104>
 454:	2b b3       	in	r18, 0x1b	; 27
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_write+0x44>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_write+0x40>
 464:	82 2b       	or	r24, r18
 466:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
 46c:	41 11       	cpse	r20, r1
 46e:	0d c0       	rjmp	.+26     	; 0x48a <DIO_write+0x6e>
 470:	28 b3       	in	r18, 0x18	; 24
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_write+0x60>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_write+0x5c>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);
 48a:	41 30       	cpi	r20, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <DIO_write+0x74>
 48e:	4a c0       	rjmp	.+148    	; 0x524 <DIO_write+0x108>
 490:	28 b3       	in	r18, 0x18	; 24
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_write+0x80>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_write+0x7c>
 4a0:	82 2b       	or	r24, r18
 4a2:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
 4a8:	41 11       	cpse	r20, r1
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <DIO_write+0xaa>
 4ac:	25 b3       	in	r18, 0x15	; 21
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0x9c>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0x98>
 4bc:	80 95       	com	r24
 4be:	82 23       	and	r24, r18
 4c0:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	79 f5       	brne	.+94     	; 0x528 <DIO_write+0x10c>
 4ca:	25 b3       	in	r18, 0x15	; 21
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_write+0xba>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_write+0xb6>
 4da:	82 2b       	or	r24, r18
 4dc:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	08 95       	ret
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
 4e2:	41 11       	cpse	r20, r1
 4e4:	0d c0       	rjmp	.+26     	; 0x500 <DIO_write+0xe4>
 4e6:	22 b3       	in	r18, 0x12	; 18
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_write+0xd6>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_write+0xd2>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
 500:	41 30       	cpi	r20, 0x01	; 1
 502:	a1 f4       	brne	.+40     	; 0x52c <DIO_write+0x110>
 504:	22 b3       	in	r18, 0x12	; 18
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_write+0xf4>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_write+0xf0>
 514:	82 2b       	or	r24, r18
 516:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
			
			break;
		default:
			return ERR;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	08 95       	ret
	}
	
	return OK;
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	08 95       	ret
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	80 e0       	ldi	r24, 0x00	; 0
}
 52e:	08 95       	ret

00000530 <DIO_toggle>:

EN_error_state DIO_toggle(EN_port_t port, EN_pin_t pin) {
	// Toggle the state of the given pin

	switch (port) {
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <DIO_toggle+0x28>
 534:	28 f0       	brcs	.+10     	; 0x540 <DIO_toggle+0x10>
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	d9 f0       	breq	.+54     	; 0x570 <DIO_toggle+0x40>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	29 f1       	breq	.+74     	; 0x588 <DIO_toggle+0x58>
 53e:	30 c0       	rjmp	.+96     	; 0x5a0 <DIO_toggle+0x70>
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
 540:	2b b3       	in	r18, 0x1b	; 27
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_toggle+0x1c>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_toggle+0x18>
 550:	82 27       	eor	r24, r18
 552:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 554:	80 e0       	ldi	r24, 0x00	; 0
	// Toggle the state of the given pin

	switch (port) {
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
 556:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
 558:	28 b3       	in	r18, 0x18	; 24
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_toggle+0x34>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_toggle+0x30>
 568:	82 27       	eor	r24, r18
 56a:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 56c:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
 56e:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
 570:	25 b3       	in	r18, 0x15	; 21
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_toggle+0x4c>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_toggle+0x48>
 580:	82 27       	eor	r24, r18
 582:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 584:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
 586:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
 588:	22 b3       	in	r18, 0x12	; 18
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_toggle+0x64>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_toggle+0x60>
 598:	82 27       	eor	r24, r18
 59a:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
			break;
 59e:	08 95       	ret
		default:
			return ERR;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return OK;
}
 5a2:	08 95       	ret

000005a4 <INTERRUPTS_init>:

#include "interrupts.h"

void INTERRUPTS_init() {
	// Enable global interrupt
	sei();
 5a4:	78 94       	sei
	
	// Set INT0 sense to rising edge
	MCUCR |= (1 << 0) | (1 << 1);
 5a6:	85 b7       	in	r24, 0x35	; 53
 5a8:	83 60       	ori	r24, 0x03	; 3
 5aa:	85 bf       	out	0x35, r24	; 53
	
	// Enable INT0
	SET_BIT(GICR, 6);
 5ac:	8b b7       	in	r24, 0x3b	; 59
 5ae:	80 64       	ori	r24, 0x40	; 64
 5b0:	8b bf       	out	0x3b, r24	; 59
 5b2:	08 95       	ret

000005b4 <TIMER_init>:
#include "timer.h"
#include <math.h>

void TIMER_init() {
	// Set timer mode to normal
	TCCR0 = 0X00;
 5b4:	13 be       	out	0x33, r1	; 51
	
	// Set timer initial value to 0
	TCNT0 = 0x00;
 5b6:	12 be       	out	0x32, r1	; 50
 5b8:	08 95       	ret

000005ba <TIMER_start>:
}

EN_error_state TIMER_start(uint16_t prescaler, uint8_t initialValue)
{
	// Set initial value
	TCNT0 = initialValue;
 5ba:	62 bf       	out	0x32, r22	; 50
	
	// Set prescaler, after which the timer starts
	switch (prescaler) {
 5bc:	80 34       	cpi	r24, 0x40	; 64
 5be:	91 05       	cpc	r25, r1
 5c0:	c9 f0       	breq	.+50     	; 0x5f4 <TIMER_start+0x3a>
 5c2:	30 f4       	brcc	.+12     	; 0x5d0 <TIMER_start+0x16>
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	91 05       	cpc	r25, r1
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <TIMER_start+0x26>
 5ca:	08 97       	sbiw	r24, 0x08	; 8
 5cc:	71 f0       	breq	.+28     	; 0x5ea <TIMER_start+0x30>
 5ce:	21 c0       	rjmp	.+66     	; 0x612 <TIMER_start+0x58>
 5d0:	81 15       	cp	r24, r1
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	92 07       	cpc	r25, r18
 5d6:	99 f0       	breq	.+38     	; 0x5fe <TIMER_start+0x44>
 5d8:	81 15       	cp	r24, r1
 5da:	94 40       	sbci	r25, 0x04	; 4
 5dc:	a9 f0       	breq	.+42     	; 0x608 <TIMER_start+0x4e>
 5de:	19 c0       	rjmp	.+50     	; 0x612 <TIMER_start+0x58>
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5e6:	80 e0       	ldi	r24, 0x00	; 0
	// Set prescaler, after which the timer starts
	switch (prescaler) {
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
			break;
 5e8:	08 95       	ret
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
 5ea:	83 b7       	in	r24, 0x33	; 51
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5f0:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 0);
			break;
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
			break;
 5f2:	08 95       	ret
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
 5f4:	83 b7       	in	r24, 0x33	; 51
 5f6:	83 60       	ori	r24, 0x03	; 3
 5f8:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 1);
			break;
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
			break;
 5fc:	08 95       	ret
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
 5fe:	83 b7       	in	r24, 0x33	; 51
 600:	84 60       	ori	r24, 0x04	; 4
 602:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 604:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= 3;
			break;
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
			break;
 606:	08 95       	ret
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	85 60       	ori	r24, 0x05	; 5
 60c:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 60e:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 2);
			break;
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
			break;
 610:	08 95       	ret
		default:
			return ERR;
 612:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	
	return OK;
	
}
 614:	08 95       	ret

00000616 <TIMER_stop>:

void TIMER_stop()
{
	// Set prescaler to zero
	TCCR0 = 0x00;
 616:	13 be       	out	0x33, r1	; 51
 618:	08 95       	ret

0000061a <TIMER_delay>:
}

void TIMER_delay(float delay_in_ms, uint16_t prescaler)
{		
 61a:	8f 92       	push	r8
 61c:	9f 92       	push	r9
 61e:	af 92       	push	r10
 620:	bf 92       	push	r11
 622:	cf 92       	push	r12
 624:	df 92       	push	r13
 626:	ef 92       	push	r14
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	6b 01       	movw	r12, r22
 634:	7c 01       	movw	r14, r24
 636:	8a 01       	movw	r16, r20
	// Timer calculations
	double clk_freq = 1000000; // 10^6
	int timer_max_count = 256; // 8^2

	double tick = ((double) prescaler / clk_freq) * 1000;
 638:	ba 01       	movw	r22, r20
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 b4 04 	call	0x968	; 0x968 <__floatunsisf>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	34 e2       	ldi	r19, 0x24	; 36
 646:	44 e7       	ldi	r20, 0x74	; 116
 648:	59 e4       	ldi	r21, 0x49	; 73
 64a:	0e 94 0c 04 	call	0x818	; 0x818 <__divsf3>
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	4a e7       	ldi	r20, 0x7A	; 122
 654:	54 e4       	ldi	r21, 0x44	; 68
 656:	0e 94 83 05 	call	0xb06	; 0xb06 <__mulsf3>
 65a:	4b 01       	movw	r8, r22
 65c:	5c 01       	movw	r10, r24
	double max_delay = tick * timer_max_count;
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	40 e8       	ldi	r20, 0x80	; 128
 664:	53 e4       	ldi	r21, 0x43	; 67
 666:	0e 94 83 05 	call	0xb06	; 0xb06 <__mulsf3>
 66a:	9b 01       	movw	r18, r22
 66c:	ac 01       	movw	r20, r24
	int num_overflows = (int) ceil(delay_in_ms / max_delay);
 66e:	c7 01       	movw	r24, r14
 670:	b6 01       	movw	r22, r12
 672:	0e 94 0c 04 	call	0x818	; 0x818 <__divsf3>
 676:	0e 94 f5 03 	call	0x7ea	; 0x7ea <ceil>
 67a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fixsfsi>
 67e:	eb 01       	movw	r28, r22
	int initial_value = (int)(timer_max_count - (delay_in_ms / tick) / 2);
 680:	a5 01       	movw	r20, r10
 682:	94 01       	movw	r18, r8
 684:	c7 01       	movw	r24, r14
 686:	b6 01       	movw	r22, r12
 688:	0e 94 0c 04 	call	0x818	; 0x818 <__divsf3>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	40 e0       	ldi	r20, 0x00	; 0
 692:	5f e3       	ldi	r21, 0x3F	; 63
 694:	0e 94 83 05 	call	0xb06	; 0xb06 <__mulsf3>
 698:	9b 01       	movw	r18, r22
 69a:	ac 01       	movw	r20, r24
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	80 e8       	ldi	r24, 0x80	; 128
 6a2:	93 e4       	ldi	r25, 0x43	; 67
 6a4:	0e 94 88 03 	call	0x710	; 0x710 <__subsf3>
 6a8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fixsfsi>
	
	// Start timer and count overflows until given delay
	TIMER_start(prescaler, initial_value);
 6ac:	c8 01       	movw	r24, r16
 6ae:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TIMER_start>
	
	uint32_t overflow_counter = 0;
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
	while (overflow_counter < num_overflows)
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <TIMER_delay+0xae>
	{
		// Wait for the overflow flag to be set
		while ((TIFR & (1 << 0)) == 0) {}
 6b8:	08 b6       	in	r0, 0x38	; 56
 6ba:	00 fe       	sbrs	r0, 0
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <TIMER_delay+0x9e>
			
		// Clear the overflow flag
		TIFR |= (1 << 0);
 6be:	88 b7       	in	r24, 0x38	; 56
 6c0:	81 60       	ori	r24, 0x01	; 1
 6c2:	88 bf       	out	0x38, r24	; 56
		
		overflow_counter++;
 6c4:	2f 5f       	subi	r18, 0xFF	; 255
 6c6:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// Start timer and count overflows until given delay
	TIMER_start(prescaler, initial_value);
	
	uint32_t overflow_counter = 0;
	while (overflow_counter < num_overflows)
 6c8:	2c 17       	cp	r18, r28
 6ca:	3d 07       	cpc	r19, r29
 6cc:	a8 f3       	brcs	.-22     	; 0x6b8 <TIMER_delay+0x9e>
		TIFR |= (1 << 0);
		
		overflow_counter++;
	}
	
	TIMER_stop();
 6ce:	0e 94 0b 03 	call	0x616	; 0x616 <TIMER_stop>
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	1f 91       	pop	r17
 6d8:	0f 91       	pop	r16
 6da:	ff 90       	pop	r15
 6dc:	ef 90       	pop	r14
 6de:	df 90       	pop	r13
 6e0:	cf 90       	pop	r12
 6e2:	bf 90       	pop	r11
 6e4:	af 90       	pop	r10
 6e6:	9f 90       	pop	r9
 6e8:	8f 90       	pop	r8
 6ea:	08 95       	ret

000006ec <TIMER_delay_5s>:

void TIMER_delay_5s() {
	TIMER_delay(5000, 1024);
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	54 e0       	ldi	r21, 0x04	; 4
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	70 e4       	ldi	r23, 0x40	; 64
 6f4:	8c e9       	ldi	r24, 0x9C	; 156
 6f6:	95 e4       	ldi	r25, 0x45	; 69
 6f8:	0e 94 0d 03 	call	0x61a	; 0x61a <TIMER_delay>
 6fc:	08 95       	ret

000006fe <TIMER_delay_1s>:
}

void TIMER_delay_1s() {
	TIMER_delay(1000, 1024);
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	54 e0       	ldi	r21, 0x04	; 4
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	8a e7       	ldi	r24, 0x7A	; 122
 708:	94 e4       	ldi	r25, 0x44	; 68
 70a:	0e 94 0d 03 	call	0x61a	; 0x61a <TIMER_delay>
 70e:	08 95       	ret

00000710 <__subsf3>:
 710:	50 58       	subi	r21, 0x80	; 128

00000712 <__addsf3>:
 712:	bb 27       	eor	r27, r27
 714:	aa 27       	eor	r26, r26
 716:	0e 94 a0 03 	call	0x740	; 0x740 <__addsf3x>
 71a:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_round>
 71e:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscA>
 722:	38 f0       	brcs	.+14     	; 0x732 <__addsf3+0x20>
 724:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_pscB>
 728:	20 f0       	brcs	.+8      	; 0x732 <__addsf3+0x20>
 72a:	39 f4       	brne	.+14     	; 0x73a <__addsf3+0x28>
 72c:	9f 3f       	cpi	r25, 0xFF	; 255
 72e:	19 f4       	brne	.+6      	; 0x736 <__addsf3+0x24>
 730:	26 f4       	brtc	.+8      	; 0x73a <__addsf3+0x28>
 732:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_nan>
 736:	0e f4       	brtc	.+2      	; 0x73a <__addsf3+0x28>
 738:	e0 95       	com	r30
 73a:	e7 fb       	bst	r30, 7
 73c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_inf>

00000740 <__addsf3x>:
 740:	e9 2f       	mov	r30, r25
 742:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_split3>
 746:	58 f3       	brcs	.-42     	; 0x71e <__addsf3+0xc>
 748:	ba 17       	cp	r27, r26
 74a:	62 07       	cpc	r22, r18
 74c:	73 07       	cpc	r23, r19
 74e:	84 07       	cpc	r24, r20
 750:	95 07       	cpc	r25, r21
 752:	20 f0       	brcs	.+8      	; 0x75c <__addsf3x+0x1c>
 754:	79 f4       	brne	.+30     	; 0x774 <__addsf3x+0x34>
 756:	a6 f5       	brtc	.+104    	; 0x7c0 <__addsf3x+0x80>
 758:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_zero>
 75c:	0e f4       	brtc	.+2      	; 0x760 <__addsf3x+0x20>
 75e:	e0 95       	com	r30
 760:	0b 2e       	mov	r0, r27
 762:	ba 2f       	mov	r27, r26
 764:	a0 2d       	mov	r26, r0
 766:	0b 01       	movw	r0, r22
 768:	b9 01       	movw	r22, r18
 76a:	90 01       	movw	r18, r0
 76c:	0c 01       	movw	r0, r24
 76e:	ca 01       	movw	r24, r20
 770:	a0 01       	movw	r20, r0
 772:	11 24       	eor	r1, r1
 774:	ff 27       	eor	r31, r31
 776:	59 1b       	sub	r21, r25
 778:	99 f0       	breq	.+38     	; 0x7a0 <__addsf3x+0x60>
 77a:	59 3f       	cpi	r21, 0xF9	; 249
 77c:	50 f4       	brcc	.+20     	; 0x792 <__addsf3x+0x52>
 77e:	50 3e       	cpi	r21, 0xE0	; 224
 780:	68 f1       	brcs	.+90     	; 0x7dc <__addsf3x+0x9c>
 782:	1a 16       	cp	r1, r26
 784:	f0 40       	sbci	r31, 0x00	; 0
 786:	a2 2f       	mov	r26, r18
 788:	23 2f       	mov	r18, r19
 78a:	34 2f       	mov	r19, r20
 78c:	44 27       	eor	r20, r20
 78e:	58 5f       	subi	r21, 0xF8	; 248
 790:	f3 cf       	rjmp	.-26     	; 0x778 <__addsf3x+0x38>
 792:	46 95       	lsr	r20
 794:	37 95       	ror	r19
 796:	27 95       	ror	r18
 798:	a7 95       	ror	r26
 79a:	f0 40       	sbci	r31, 0x00	; 0
 79c:	53 95       	inc	r21
 79e:	c9 f7       	brne	.-14     	; 0x792 <__addsf3x+0x52>
 7a0:	7e f4       	brtc	.+30     	; 0x7c0 <__addsf3x+0x80>
 7a2:	1f 16       	cp	r1, r31
 7a4:	ba 0b       	sbc	r27, r26
 7a6:	62 0b       	sbc	r22, r18
 7a8:	73 0b       	sbc	r23, r19
 7aa:	84 0b       	sbc	r24, r20
 7ac:	ba f0       	brmi	.+46     	; 0x7dc <__addsf3x+0x9c>
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	a1 f0       	breq	.+40     	; 0x7da <__addsf3x+0x9a>
 7b2:	ff 0f       	add	r31, r31
 7b4:	bb 1f       	adc	r27, r27
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	c2 f7       	brpl	.-16     	; 0x7ae <__addsf3x+0x6e>
 7be:	0e c0       	rjmp	.+28     	; 0x7dc <__addsf3x+0x9c>
 7c0:	ba 0f       	add	r27, r26
 7c2:	62 1f       	adc	r22, r18
 7c4:	73 1f       	adc	r23, r19
 7c6:	84 1f       	adc	r24, r20
 7c8:	48 f4       	brcc	.+18     	; 0x7dc <__addsf3x+0x9c>
 7ca:	87 95       	ror	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f7 95       	ror	r31
 7d4:	9e 3f       	cpi	r25, 0xFE	; 254
 7d6:	08 f0       	brcs	.+2      	; 0x7da <__addsf3x+0x9a>
 7d8:	b0 cf       	rjmp	.-160    	; 0x73a <__addsf3+0x28>
 7da:	93 95       	inc	r25
 7dc:	88 0f       	add	r24, r24
 7de:	08 f0       	brcs	.+2      	; 0x7e2 <__addsf3x+0xa2>
 7e0:	99 27       	eor	r25, r25
 7e2:	ee 0f       	add	r30, r30
 7e4:	97 95       	ror	r25
 7e6:	87 95       	ror	r24
 7e8:	08 95       	ret

000007ea <ceil>:
 7ea:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_trunc>
 7ee:	90 f0       	brcs	.+36     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f0:	9f 37       	cpi	r25, 0x7F	; 127
 7f2:	48 f4       	brcc	.+18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f4:	91 11       	cpse	r25, r1
 7f6:	16 f4       	brtc	.+4      	; 0x7fc <ceil+0x12>
 7f8:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	80 e8       	ldi	r24, 0x80	; 128
 802:	9f e3       	ldi	r25, 0x3F	; 63
 804:	08 95       	ret
 806:	26 f0       	brts	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	1b 16       	cp	r1, r27
 80a:	61 1d       	adc	r22, r1
 80c:	71 1d       	adc	r23, r1
 80e:	81 1d       	adc	r24, r1
 810:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__fp_mintl>
 814:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_mpack>

00000818 <__divsf3>:
 818:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3x>
 81c:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_round>
 820:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_pscB>
 824:	58 f0       	brcs	.+22     	; 0x83c <__divsf3+0x24>
 826:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscA>
 82a:	40 f0       	brcs	.+16     	; 0x83c <__divsf3+0x24>
 82c:	29 f4       	brne	.+10     	; 0x838 <__divsf3+0x20>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	29 f0       	breq	.+10     	; 0x83c <__divsf3+0x24>
 832:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_inf>
 836:	51 11       	cpse	r21, r1
 838:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>
 83c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_nan>

00000840 <__divsf3x>:
 840:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_split3>
 844:	68 f3       	brcs	.-38     	; 0x820 <__divsf3+0x8>

00000846 <__divsf3_pse>:
 846:	99 23       	and	r25, r25
 848:	b1 f3       	breq	.-20     	; 0x836 <__divsf3+0x1e>
 84a:	55 23       	and	r21, r21
 84c:	91 f3       	breq	.-28     	; 0x832 <__divsf3+0x1a>
 84e:	95 1b       	sub	r25, r21
 850:	55 0b       	sbc	r21, r21
 852:	bb 27       	eor	r27, r27
 854:	aa 27       	eor	r26, r26
 856:	62 17       	cp	r22, r18
 858:	73 07       	cpc	r23, r19
 85a:	84 07       	cpc	r24, r20
 85c:	38 f0       	brcs	.+14     	; 0x86c <__stack+0xd>
 85e:	9f 5f       	subi	r25, 0xFF	; 255
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	22 0f       	add	r18, r18
 864:	33 1f       	adc	r19, r19
 866:	44 1f       	adc	r20, r20
 868:	aa 1f       	adc	r26, r26
 86a:	a9 f3       	breq	.-22     	; 0x856 <__divsf3_pse+0x10>
 86c:	35 d0       	rcall	.+106    	; 0x8d8 <__stack+0x79>
 86e:	0e 2e       	mov	r0, r30
 870:	3a f0       	brmi	.+14     	; 0x880 <__stack+0x21>
 872:	e0 e8       	ldi	r30, 0x80	; 128
 874:	32 d0       	rcall	.+100    	; 0x8da <__stack+0x7b>
 876:	91 50       	subi	r25, 0x01	; 1
 878:	50 40       	sbci	r21, 0x00	; 0
 87a:	e6 95       	lsr	r30
 87c:	00 1c       	adc	r0, r0
 87e:	ca f7       	brpl	.-14     	; 0x872 <__stack+0x13>
 880:	2b d0       	rcall	.+86     	; 0x8d8 <__stack+0x79>
 882:	fe 2f       	mov	r31, r30
 884:	29 d0       	rcall	.+82     	; 0x8d8 <__stack+0x79>
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	bb 1f       	adc	r27, r27
 88e:	26 17       	cp	r18, r22
 890:	37 07       	cpc	r19, r23
 892:	48 07       	cpc	r20, r24
 894:	ab 07       	cpc	r26, r27
 896:	b0 e8       	ldi	r27, 0x80	; 128
 898:	09 f0       	breq	.+2      	; 0x89c <__stack+0x3d>
 89a:	bb 0b       	sbc	r27, r27
 89c:	80 2d       	mov	r24, r0
 89e:	bf 01       	movw	r22, r30
 8a0:	ff 27       	eor	r31, r31
 8a2:	93 58       	subi	r25, 0x83	; 131
 8a4:	5f 4f       	sbci	r21, 0xFF	; 255
 8a6:	3a f0       	brmi	.+14     	; 0x8b6 <__stack+0x57>
 8a8:	9e 3f       	cpi	r25, 0xFE	; 254
 8aa:	51 05       	cpc	r21, r1
 8ac:	78 f0       	brcs	.+30     	; 0x8cc <__stack+0x6d>
 8ae:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_inf>
 8b2:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	e4 f3       	brlt	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	98 3e       	cpi	r25, 0xE8	; 232
 8bc:	d4 f3       	brlt	.-12     	; 0x8b2 <__stack+0x53>
 8be:	86 95       	lsr	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f7 95       	ror	r31
 8c8:	9f 5f       	subi	r25, 0xFF	; 255
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__stack+0x5f>
 8cc:	88 0f       	add	r24, r24
 8ce:	91 1d       	adc	r25, r1
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	97 f9       	bld	r25, 7
 8d6:	08 95       	ret
 8d8:	e1 e0       	ldi	r30, 0x01	; 1
 8da:	66 0f       	add	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	bb 1f       	adc	r27, r27
 8e2:	62 17       	cp	r22, r18
 8e4:	73 07       	cpc	r23, r19
 8e6:	84 07       	cpc	r24, r20
 8e8:	ba 07       	cpc	r27, r26
 8ea:	20 f0       	brcs	.+8      	; 0x8f4 <__stack+0x95>
 8ec:	62 1b       	sub	r22, r18
 8ee:	73 0b       	sbc	r23, r19
 8f0:	84 0b       	sbc	r24, r20
 8f2:	ba 0b       	sbc	r27, r26
 8f4:	ee 1f       	adc	r30, r30
 8f6:	88 f7       	brcc	.-30     	; 0x8da <__stack+0x7b>
 8f8:	e0 95       	com	r30
 8fa:	08 95       	ret

000008fc <__fixsfsi>:
 8fc:	0e 94 85 04 	call	0x90a	; 0x90a <__fixunssfsi>
 900:	68 94       	set
 902:	b1 11       	cpse	r27, r1
 904:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>
 908:	08 95       	ret

0000090a <__fixunssfsi>:
 90a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_splitA>
 90e:	88 f0       	brcs	.+34     	; 0x932 <__fixunssfsi+0x28>
 910:	9f 57       	subi	r25, 0x7F	; 127
 912:	98 f0       	brcs	.+38     	; 0x93a <__fixunssfsi+0x30>
 914:	b9 2f       	mov	r27, r25
 916:	99 27       	eor	r25, r25
 918:	b7 51       	subi	r27, 0x17	; 23
 91a:	b0 f0       	brcs	.+44     	; 0x948 <__fixunssfsi+0x3e>
 91c:	e1 f0       	breq	.+56     	; 0x956 <__fixunssfsi+0x4c>
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	1a f0       	brmi	.+6      	; 0x92e <__fixunssfsi+0x24>
 928:	ba 95       	dec	r27
 92a:	c9 f7       	brne	.-14     	; 0x91e <__fixunssfsi+0x14>
 92c:	14 c0       	rjmp	.+40     	; 0x956 <__fixunssfsi+0x4c>
 92e:	b1 30       	cpi	r27, 0x01	; 1
 930:	91 f0       	breq	.+36     	; 0x956 <__fixunssfsi+0x4c>
 932:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_zero>
 936:	b1 e0       	ldi	r27, 0x01	; 1
 938:	08 95       	ret
 93a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_zero>
 93e:	67 2f       	mov	r22, r23
 940:	78 2f       	mov	r23, r24
 942:	88 27       	eor	r24, r24
 944:	b8 5f       	subi	r27, 0xF8	; 248
 946:	39 f0       	breq	.+14     	; 0x956 <__fixunssfsi+0x4c>
 948:	b9 3f       	cpi	r27, 0xF9	; 249
 94a:	cc f3       	brlt	.-14     	; 0x93e <__fixunssfsi+0x34>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b3 95       	inc	r27
 954:	d9 f7       	brne	.-10     	; 0x94c <__fixunssfsi+0x42>
 956:	3e f4       	brtc	.+14     	; 0x966 <__fixunssfsi+0x5c>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <__floatunsisf>:
 968:	e8 94       	clt
 96a:	09 c0       	rjmp	.+18     	; 0x97e <__floatsisf+0x12>

0000096c <__floatsisf>:
 96c:	97 fb       	bst	r25, 7
 96e:	3e f4       	brtc	.+14     	; 0x97e <__floatsisf+0x12>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	99 23       	and	r25, r25
 980:	a9 f0       	breq	.+42     	; 0x9ac <__floatsisf+0x40>
 982:	f9 2f       	mov	r31, r25
 984:	96 e9       	ldi	r25, 0x96	; 150
 986:	bb 27       	eor	r27, r27
 988:	93 95       	inc	r25
 98a:	f6 95       	lsr	r31
 98c:	87 95       	ror	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f1 11       	cpse	r31, r1
 996:	f8 cf       	rjmp	.-16     	; 0x988 <__floatsisf+0x1c>
 998:	fa f4       	brpl	.+62     	; 0x9d8 <__floatsisf+0x6c>
 99a:	bb 0f       	add	r27, r27
 99c:	11 f4       	brne	.+4      	; 0x9a2 <__floatsisf+0x36>
 99e:	60 ff       	sbrs	r22, 0
 9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <__floatsisf+0x6c>
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <__floatsisf+0x6c>
 9ac:	88 23       	and	r24, r24
 9ae:	11 f0       	breq	.+4      	; 0x9b4 <__floatsisf+0x48>
 9b0:	96 e9       	ldi	r25, 0x96	; 150
 9b2:	11 c0       	rjmp	.+34     	; 0x9d6 <__floatsisf+0x6a>
 9b4:	77 23       	and	r23, r23
 9b6:	21 f0       	breq	.+8      	; 0x9c0 <__floatsisf+0x54>
 9b8:	9e e8       	ldi	r25, 0x8E	; 142
 9ba:	87 2f       	mov	r24, r23
 9bc:	76 2f       	mov	r23, r22
 9be:	05 c0       	rjmp	.+10     	; 0x9ca <__floatsisf+0x5e>
 9c0:	66 23       	and	r22, r22
 9c2:	71 f0       	breq	.+28     	; 0x9e0 <__floatsisf+0x74>
 9c4:	96 e8       	ldi	r25, 0x86	; 134
 9c6:	86 2f       	mov	r24, r22
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	2a f0       	brmi	.+10     	; 0x9d8 <__floatsisf+0x6c>
 9ce:	9a 95       	dec	r25
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	da f7       	brpl	.-10     	; 0x9ce <__floatsisf+0x62>
 9d8:	88 0f       	add	r24, r24
 9da:	96 95       	lsr	r25
 9dc:	87 95       	ror	r24
 9de:	97 f9       	bld	r25, 7
 9e0:	08 95       	ret

000009e2 <__fp_inf>:
 9e2:	97 f9       	bld	r25, 7
 9e4:	9f 67       	ori	r25, 0x7F	; 127
 9e6:	80 e8       	ldi	r24, 0x80	; 128
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	08 95       	ret

000009ee <__fp_mintl>:
 9ee:	88 23       	and	r24, r24
 9f0:	71 f4       	brne	.+28     	; 0xa0e <__fp_mintl+0x20>
 9f2:	77 23       	and	r23, r23
 9f4:	21 f0       	breq	.+8      	; 0x9fe <__fp_mintl+0x10>
 9f6:	98 50       	subi	r25, 0x08	; 8
 9f8:	87 2b       	or	r24, r23
 9fa:	76 2f       	mov	r23, r22
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <__fp_mintl+0x1e>
 9fe:	66 23       	and	r22, r22
 a00:	11 f4       	brne	.+4      	; 0xa06 <__fp_mintl+0x18>
 a02:	99 27       	eor	r25, r25
 a04:	0d c0       	rjmp	.+26     	; 0xa20 <__fp_mintl+0x32>
 a06:	90 51       	subi	r25, 0x10	; 16
 a08:	86 2b       	or	r24, r22
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	2a f0       	brmi	.+10     	; 0xa1a <__fp_mintl+0x2c>
 a10:	9a 95       	dec	r25
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	da f7       	brpl	.-10     	; 0xa10 <__fp_mintl+0x22>
 a1a:	88 0f       	add	r24, r24
 a1c:	96 95       	lsr	r25
 a1e:	87 95       	ror	r24
 a20:	97 f9       	bld	r25, 7
 a22:	08 95       	ret

00000a24 <__fp_mpack>:
 a24:	9f 3f       	cpi	r25, 0xFF	; 255
 a26:	31 f0       	breq	.+12     	; 0xa34 <__fp_mpack_finite+0xc>

00000a28 <__fp_mpack_finite>:
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	20 f4       	brcc	.+8      	; 0xa34 <__fp_mpack_finite+0xc>
 a2c:	87 95       	ror	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	88 0f       	add	r24, r24
 a36:	91 1d       	adc	r25, r1
 a38:	96 95       	lsr	r25
 a3a:	87 95       	ror	r24
 a3c:	97 f9       	bld	r25, 7
 a3e:	08 95       	ret

00000a40 <__fp_nan>:
 a40:	9f ef       	ldi	r25, 0xFF	; 255
 a42:	80 ec       	ldi	r24, 0xC0	; 192
 a44:	08 95       	ret

00000a46 <__fp_pscA>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	16 16       	cp	r1, r22
 a4c:	17 06       	cpc	r1, r23
 a4e:	18 06       	cpc	r1, r24
 a50:	09 06       	cpc	r0, r25
 a52:	08 95       	ret

00000a54 <__fp_pscB>:
 a54:	00 24       	eor	r0, r0
 a56:	0a 94       	dec	r0
 a58:	12 16       	cp	r1, r18
 a5a:	13 06       	cpc	r1, r19
 a5c:	14 06       	cpc	r1, r20
 a5e:	05 06       	cpc	r0, r21
 a60:	08 95       	ret

00000a62 <__fp_round>:
 a62:	09 2e       	mov	r0, r25
 a64:	03 94       	inc	r0
 a66:	00 0c       	add	r0, r0
 a68:	11 f4       	brne	.+4      	; 0xa6e <__fp_round+0xc>
 a6a:	88 23       	and	r24, r24
 a6c:	52 f0       	brmi	.+20     	; 0xa82 <__fp_round+0x20>
 a6e:	bb 0f       	add	r27, r27
 a70:	40 f4       	brcc	.+16     	; 0xa82 <__fp_round+0x20>
 a72:	bf 2b       	or	r27, r31
 a74:	11 f4       	brne	.+4      	; 0xa7a <__fp_round+0x18>
 a76:	60 ff       	sbrs	r22, 0
 a78:	04 c0       	rjmp	.+8      	; 0xa82 <__fp_round+0x20>
 a7a:	6f 5f       	subi	r22, 0xFF	; 255
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	08 95       	ret

00000a84 <__fp_split3>:
 a84:	57 fd       	sbrc	r21, 7
 a86:	90 58       	subi	r25, 0x80	; 128
 a88:	44 0f       	add	r20, r20
 a8a:	55 1f       	adc	r21, r21
 a8c:	59 f0       	breq	.+22     	; 0xaa4 <__fp_splitA+0x10>
 a8e:	5f 3f       	cpi	r21, 0xFF	; 255
 a90:	71 f0       	breq	.+28     	; 0xaae <__fp_splitA+0x1a>
 a92:	47 95       	ror	r20

00000a94 <__fp_splitA>:
 a94:	88 0f       	add	r24, r24
 a96:	97 fb       	bst	r25, 7
 a98:	99 1f       	adc	r25, r25
 a9a:	61 f0       	breq	.+24     	; 0xab4 <__fp_splitA+0x20>
 a9c:	9f 3f       	cpi	r25, 0xFF	; 255
 a9e:	79 f0       	breq	.+30     	; 0xabe <__fp_splitA+0x2a>
 aa0:	87 95       	ror	r24
 aa2:	08 95       	ret
 aa4:	12 16       	cp	r1, r18
 aa6:	13 06       	cpc	r1, r19
 aa8:	14 06       	cpc	r1, r20
 aaa:	55 1f       	adc	r21, r21
 aac:	f2 cf       	rjmp	.-28     	; 0xa92 <__fp_split3+0xe>
 aae:	46 95       	lsr	r20
 ab0:	f1 df       	rcall	.-30     	; 0xa94 <__fp_splitA>
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <__fp_splitA+0x30>
 ab4:	16 16       	cp	r1, r22
 ab6:	17 06       	cpc	r1, r23
 ab8:	18 06       	cpc	r1, r24
 aba:	99 1f       	adc	r25, r25
 abc:	f1 cf       	rjmp	.-30     	; 0xaa0 <__fp_splitA+0xc>
 abe:	86 95       	lsr	r24
 ac0:	71 05       	cpc	r23, r1
 ac2:	61 05       	cpc	r22, r1
 ac4:	08 94       	sec
 ac6:	08 95       	ret

00000ac8 <__fp_trunc>:
 ac8:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fp_splitA>
 acc:	a0 f0       	brcs	.+40     	; 0xaf6 <__fp_trunc+0x2e>
 ace:	be e7       	ldi	r27, 0x7E	; 126
 ad0:	b9 17       	cp	r27, r25
 ad2:	88 f4       	brcc	.+34     	; 0xaf6 <__fp_trunc+0x2e>
 ad4:	bb 27       	eor	r27, r27
 ad6:	9f 38       	cpi	r25, 0x8F	; 143
 ad8:	60 f4       	brcc	.+24     	; 0xaf2 <__fp_trunc+0x2a>
 ada:	16 16       	cp	r1, r22
 adc:	b1 1d       	adc	r27, r1
 ade:	67 2f       	mov	r22, r23
 ae0:	78 2f       	mov	r23, r24
 ae2:	88 27       	eor	r24, r24
 ae4:	98 5f       	subi	r25, 0xF8	; 248
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <__fp_trunc+0xe>
 ae8:	86 95       	lsr	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b1 1d       	adc	r27, r1
 af0:	93 95       	inc	r25
 af2:	96 39       	cpi	r25, 0x96	; 150
 af4:	c8 f3       	brcs	.-14     	; 0xae8 <__fp_trunc+0x20>
 af6:	08 95       	ret

00000af8 <__fp_zero>:
 af8:	e8 94       	clt

00000afa <__fp_szero>:
 afa:	bb 27       	eor	r27, r27
 afc:	66 27       	eor	r22, r22
 afe:	77 27       	eor	r23, r23
 b00:	cb 01       	movw	r24, r22
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret

00000b06 <__mulsf3>:
 b06:	0e 94 96 05 	call	0xb2c	; 0xb2c <__mulsf3x>
 b0a:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_round>
 b0e:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscA>
 b12:	38 f0       	brcs	.+14     	; 0xb22 <__mulsf3+0x1c>
 b14:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_pscB>
 b18:	20 f0       	brcs	.+8      	; 0xb22 <__mulsf3+0x1c>
 b1a:	95 23       	and	r25, r21
 b1c:	11 f0       	breq	.+4      	; 0xb22 <__mulsf3+0x1c>
 b1e:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_inf>
 b22:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_nan>
 b26:	11 24       	eor	r1, r1
 b28:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>

00000b2c <__mulsf3x>:
 b2c:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_split3>
 b30:	70 f3       	brcs	.-36     	; 0xb0e <__mulsf3+0x8>

00000b32 <__mulsf3_pse>:
 b32:	95 9f       	mul	r25, r21
 b34:	c1 f3       	breq	.-16     	; 0xb26 <__mulsf3+0x20>
 b36:	95 0f       	add	r25, r21
 b38:	50 e0       	ldi	r21, 0x00	; 0
 b3a:	55 1f       	adc	r21, r21
 b3c:	62 9f       	mul	r22, r18
 b3e:	f0 01       	movw	r30, r0
 b40:	72 9f       	mul	r23, r18
 b42:	bb 27       	eor	r27, r27
 b44:	f0 0d       	add	r31, r0
 b46:	b1 1d       	adc	r27, r1
 b48:	63 9f       	mul	r22, r19
 b4a:	aa 27       	eor	r26, r26
 b4c:	f0 0d       	add	r31, r0
 b4e:	b1 1d       	adc	r27, r1
 b50:	aa 1f       	adc	r26, r26
 b52:	64 9f       	mul	r22, r20
 b54:	66 27       	eor	r22, r22
 b56:	b0 0d       	add	r27, r0
 b58:	a1 1d       	adc	r26, r1
 b5a:	66 1f       	adc	r22, r22
 b5c:	82 9f       	mul	r24, r18
 b5e:	22 27       	eor	r18, r18
 b60:	b0 0d       	add	r27, r0
 b62:	a1 1d       	adc	r26, r1
 b64:	62 1f       	adc	r22, r18
 b66:	73 9f       	mul	r23, r19
 b68:	b0 0d       	add	r27, r0
 b6a:	a1 1d       	adc	r26, r1
 b6c:	62 1f       	adc	r22, r18
 b6e:	83 9f       	mul	r24, r19
 b70:	a0 0d       	add	r26, r0
 b72:	61 1d       	adc	r22, r1
 b74:	22 1f       	adc	r18, r18
 b76:	74 9f       	mul	r23, r20
 b78:	33 27       	eor	r19, r19
 b7a:	a0 0d       	add	r26, r0
 b7c:	61 1d       	adc	r22, r1
 b7e:	23 1f       	adc	r18, r19
 b80:	84 9f       	mul	r24, r20
 b82:	60 0d       	add	r22, r0
 b84:	21 1d       	adc	r18, r1
 b86:	82 2f       	mov	r24, r18
 b88:	76 2f       	mov	r23, r22
 b8a:	6a 2f       	mov	r22, r26
 b8c:	11 24       	eor	r1, r1
 b8e:	9f 57       	subi	r25, 0x7F	; 127
 b90:	50 40       	sbci	r21, 0x00	; 0
 b92:	9a f0       	brmi	.+38     	; 0xbba <__mulsf3_pse+0x88>
 b94:	f1 f0       	breq	.+60     	; 0xbd2 <__mulsf3_pse+0xa0>
 b96:	88 23       	and	r24, r24
 b98:	4a f0       	brmi	.+18     	; 0xbac <__mulsf3_pse+0x7a>
 b9a:	ee 0f       	add	r30, r30
 b9c:	ff 1f       	adc	r31, r31
 b9e:	bb 1f       	adc	r27, r27
 ba0:	66 1f       	adc	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	91 50       	subi	r25, 0x01	; 1
 ba8:	50 40       	sbci	r21, 0x00	; 0
 baa:	a9 f7       	brne	.-22     	; 0xb96 <__mulsf3_pse+0x64>
 bac:	9e 3f       	cpi	r25, 0xFE	; 254
 bae:	51 05       	cpc	r21, r1
 bb0:	80 f0       	brcs	.+32     	; 0xbd2 <__mulsf3_pse+0xa0>
 bb2:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__fp_inf>
 bb6:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__fp_szero>
 bba:	5f 3f       	cpi	r21, 0xFF	; 255
 bbc:	e4 f3       	brlt	.-8      	; 0xbb6 <__mulsf3_pse+0x84>
 bbe:	98 3e       	cpi	r25, 0xE8	; 232
 bc0:	d4 f3       	brlt	.-12     	; 0xbb6 <__mulsf3_pse+0x84>
 bc2:	86 95       	lsr	r24
 bc4:	77 95       	ror	r23
 bc6:	67 95       	ror	r22
 bc8:	b7 95       	ror	r27
 bca:	f7 95       	ror	r31
 bcc:	e7 95       	ror	r30
 bce:	9f 5f       	subi	r25, 0xFF	; 255
 bd0:	c1 f7       	brne	.-16     	; 0xbc2 <__mulsf3_pse+0x90>
 bd2:	fe 2b       	or	r31, r30
 bd4:	88 0f       	add	r24, r24
 bd6:	91 1d       	adc	r25, r1
 bd8:	96 95       	lsr	r25
 bda:	87 95       	ror	r24
 bdc:	97 f9       	bld	r25, 7
 bde:	08 95       	ret

00000be0 <_exit>:
 be0:	f8 94       	cli

00000be2 <__stop_program>:
 be2:	ff cf       	rjmp	.-2      	; 0xbe2 <__stop_program>
