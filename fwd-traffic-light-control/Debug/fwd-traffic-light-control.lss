
fwd-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c52  00000ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016bc  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a99  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db3  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00003dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a2c  00000000  00000000  000046df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000510b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  8a:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normalMode>:
uint8_t wasRedLedOn = 0;
uint8_t buttonPressed = 0;

void normalMode() {
	// For pedestrians, turn on red
	LED_on_only(LED_PEDESTRIANS_PORT, LED_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_on_only>

	// For cars, turn on green at first
	LED_on_only(LED_CARS_PORT, LED_GREEN_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_on_only>
	TIMER_delay_5s();
  a2:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER_delay_5s>
	wasRedLedOn = 0;
  a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ae:	81 11       	cpse	r24, r1
  b0:	19 c0       	rjmp	.+50     	; 0xe4 <normalMode+0x52>

	// Then, turn off green => blink yellow
	LED_off(LED_CARS_PORT, LED_GREEN_PIN);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
	LED_blink(LED_CARS_PORT, LED_YELLOW_PIN);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LED_blink>
	wasRedLedOn = 0;
  c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	81 11       	cpse	r24, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <normalMode+0x52>

	// Lastly, turn off yellow => turn on red
	LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
	LED_on(LED_CARS_PORT, LED_RED_PIN);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
	TIMER_delay_5s();
  da:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER_delay_5s>
	wasRedLedOn = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <wasRedLedOn>
  e4:	08 95       	ret

000000e6 <pedestrianMode>:
	if(buttonPressed) return;
}

void pedestrianMode() {
	if(wasRedLedOn) {
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <wasRedLedOn>
  ea:	88 23       	and	r24, r24
  ec:	49 f0       	breq	.+18     	; 0x100 <pedestrianMode+0x1a>
		// For cars, turn on red
		LED_on_only(LED_CARS_PORT, LED_RED_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_on_only>

		// For pedestrians, turn on green
		LED_on_only(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LED_on_only>
  fe:	26 c0       	rjmp	.+76     	; 0x14c <pedestrianMode+0x66>
	} else {
		// For cars and pedestrians, blink both yellow
		LED_off(LED_CARS_PORT, LED_RED_PIN);
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_off(LED_CARS_PORT, LED_GREEN_PIN);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_RED_PIN);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 26 01 	call	0x24c	; 0x24c <LED_double_blink>
		
		// The, turn off both yellow => turn on cars red led and pedestrians green led
		LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
		LED_on(LED_CARS_PORT, LED_RED_PIN);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
		LED_on(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
	}
	
	TIMER_delay_5s();
 14c:	0e 94 ad 03 	call	0x75a	; 0x75a <TIMER_delay_5s>
	
	// Turn off cars red => Blink both yellow
	LED_off(LED_CARS_PORT, LED_RED_PIN);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
	LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 26 01 	call	0x24c	; 0x24c <LED_double_blink>
	
	isNormalMode = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	wasRedLedOn = 0;
 16a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	buttonPressed = 0;
 16e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 172:	08 95       	ret

00000174 <APP_init>:
}

void APP_init() {
	LEDS_init();
 174:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LEDS_init>
	BUTTON_init();
 178:	0e 94 cb 00 	call	0x196	; 0x196 <BUTTON_init>
	TIMER_init();
 17c:	0e 94 0c 03 	call	0x618	; 0x618 <TIMER_init>
 180:	08 95       	ret

00000182 <APP_start>:
}

void APP_start() {
	if(isNormalMode) {
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	88 23       	and	r24, r24
 188:	19 f0       	breq	.+6      	; 0x190 <APP_start+0xe>
		normalMode();
 18a:	0e 94 49 00 	call	0x92	; 0x92 <normalMode>
 18e:	08 95       	ret
	} else {
		pedestrianMode();
 190:	0e 94 73 00 	call	0xe6	; 0xe6 <pedestrianMode>
 194:	08 95       	ret

00000196 <BUTTON_init>:
 */ 

#include "button.h"

void BUTTON_init() {
	DIO_init(BUTTON_PORT, BUTTON_PIN, IN);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	83 e0       	ldi	r24, 0x03	; 3
 19c:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
	INTERRUPTS_init();
 1a0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <INTERRUPTS_init>
 1a4:	08 95       	ret

000001a6 <LEDS_init>:
 */ 

#include "led.h"

void LEDS_init() {
	DIO_init(LED_CARS_PORT, LED_RED_PIN, OUT);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_YELLOW_PIN, OUT);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
	DIO_init(LED_CARS_PORT, LED_GREEN_PIN, OUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>

	DIO_init(LED_PEDESTRIANS_PORT, LED_RED_PIN, OUT);
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN, OUT);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_GREEN_PIN, OUT);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 a8 01 	call	0x350	; 0x350 <DIO_init>
 1e2:	08 95       	ret

000001e4 <LED_on>:
}

EN_error_state LED_on(EN_port_t port, EN_pin_t pin) {
	return DIO_write(port, pin, HIGH);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_write>
}
 1ea:	08 95       	ret

000001ec <LED_off>:

EN_error_state LED_off(EN_port_t port, EN_pin_t pin) {
	return DIO_write(port, pin, LOW);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	0e 94 2c 02 	call	0x458	; 0x458 <DIO_write>
}
 1f2:	08 95       	ret

000001f4 <LED_toggle>:

EN_error_state LED_toggle(EN_port_t port, EN_pin_t pin) {
	return DIO_toggle(port, pin);
 1f4:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_toggle>
}
 1f8:	08 95       	ret

000001fa <LED_blink>:

EN_error_state LED_blink(EN_port_t port, EN_pin_t pin) {
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	08 2f       	mov	r16, r24
 206:	f6 2e       	mov	r15, r22
	EN_error_state errorState = LED_on(port, pin);
 208:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
 20c:	18 2f       	mov	r17, r24
	
	if(errorState != ERR) {
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	89 f4       	brne	.+34     	; 0x234 <LED_blink+0x3a>
 212:	15 c0       	rjmp	.+42     	; 0x23e <LED_blink+0x44>
		for(int i = 0; i < 5; i++) {
			errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
 214:	0e 94 b6 03 	call	0x76c	; 0x76c <TIMER_delay_1s>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	09 f4       	brne	.+2      	; 0x21e <LED_blink+0x24>
 21c:	11 e0       	ldi	r17, 0x01	; 1
			errorState = ACCUMULATE_ERROR(LED_toggle(port, pin), errorState);
 21e:	6f 2d       	mov	r22, r15
 220:	80 2f       	mov	r24, r16
 222:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_toggle>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	09 f4       	brne	.+2      	; 0x22c <LED_blink+0x32>
 22a:	11 e0       	ldi	r17, 0x01	; 1
			if(errorState == ERR) break;
 22c:	11 30       	cpi	r17, 0x01	; 1
 22e:	39 f0       	breq	.+14     	; 0x23e <LED_blink+0x44>

EN_error_state LED_blink(EN_port_t port, EN_pin_t pin) {
	EN_error_state errorState = LED_on(port, pin);
	
	if(errorState != ERR) {
		for(int i = 0; i < 5; i++) {
 230:	21 96       	adiw	r28, 0x01	; 1
 232:	02 c0       	rjmp	.+4      	; 0x238 <LED_blink+0x3e>
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	c5 30       	cpi	r28, 0x05	; 5
 23a:	d1 05       	cpc	r29, r1
 23c:	5c f3       	brlt	.-42     	; 0x214 <LED_blink+0x1a>
			if(errorState == ERR) break;
		}
	}
	
	return errorState;
}
 23e:	81 2f       	mov	r24, r17
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	08 95       	ret

0000024c <LED_double_blink>:

EN_error_state LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
 24c:	df 92       	push	r13
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	08 2f       	mov	r16, r24
 25c:	f6 2e       	mov	r15, r22
 25e:	e4 2e       	mov	r14, r20
 260:	d2 2e       	mov	r13, r18
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
 262:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	11 f0       	breq	.+4      	; 0x26e <LED_double_blink+0x22>
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	01 c0       	rjmp	.+2      	; 0x270 <LED_double_blink+0x24>
 26e:	11 e0       	ldi	r17, 0x01	; 1
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
 270:	6d 2d       	mov	r22, r13
 272:	8e 2d       	mov	r24, r14
 274:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	09 f4       	brne	.+2      	; 0x27e <LED_double_blink+0x32>
 27c:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 5; i++) {
		errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
		errorState = ACCUMULATE_ERROR(LED_toggle(port1, pin1), errorState);
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <LED_double_blink+0x64>
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
	for(int i = 0; i < 5; i++) {
		errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
 284:	0e 94 b6 03 	call	0x76c	; 0x76c <TIMER_delay_1s>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	09 f4       	brne	.+2      	; 0x28e <LED_double_blink+0x42>
 28c:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_toggle(port1, pin1), errorState);
 28e:	6f 2d       	mov	r22, r15
 290:	80 2f       	mov	r24, r16
 292:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_toggle>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	09 f4       	brne	.+2      	; 0x29c <LED_double_blink+0x50>
 29a:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
 29c:	6d 2d       	mov	r22, r13
 29e:	8e 2d       	mov	r24, r14
 2a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_toggle>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <LED_double_blink+0x5e>
 2a8:	11 e0       	ldi	r17, 0x01	; 1
		if(errorState == ERR) break;
 2aa:	11 30       	cpi	r17, 0x01	; 1
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <LED_double_blink+0x6a>
EN_error_state LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
	for(int i = 0; i < 5; i++) {
 2ae:	21 96       	adiw	r28, 0x01	; 1
 2b0:	c5 30       	cpi	r28, 0x05	; 5
 2b2:	d1 05       	cpc	r29, r1
 2b4:	3c f3       	brlt	.-50     	; 0x284 <LED_double_blink+0x38>
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
		if(errorState == ERR) break;
	}
	
	return errorState;
}
 2b6:	81 2f       	mov	r24, r17
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	08 95       	ret

000002c8 <LED_on_only>:

EN_error_state LED_on_only(EN_port_t port, EN_pin_t pin) {
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	d8 2f       	mov	r29, r24
 2d0:	c6 2f       	mov	r28, r22
	EN_error_state errorState = LED_on(port, pin);
 2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LED_on>
 2d6:	18 2f       	mov	r17, r24

	if(pin == LED_RED_PIN) {
 2d8:	c2 30       	cpi	r28, 0x02	; 2
 2da:	79 f4       	brne	.+30     	; 0x2fa <LED_on_only+0x32>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_GREEN_PIN), errorState);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	8d 2f       	mov	r24, r29
 2e0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	09 f4       	brne	.+2      	; 0x2ea <LED_on_only+0x22>
 2e8:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_YELLOW_PIN), errorState);
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	8d 2f       	mov	r24, r29
 2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	19 f5       	brne	.+70     	; 0x33c <LED_on_only+0x74>
 2f6:	11 e0       	ldi	r17, 0x01	; 1
 2f8:	21 c0       	rjmp	.+66     	; 0x33c <LED_on_only+0x74>
	} else if(pin == LED_GREEN_PIN) {
 2fa:	c1 11       	cpse	r28, r1
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <LED_on_only+0x54>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_RED_PIN), errorState);
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	8d 2f       	mov	r24, r29
 302:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	09 f4       	brne	.+2      	; 0x30c <LED_on_only+0x44>
 30a:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_YELLOW_PIN), errorState);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8d 2f       	mov	r24, r29
 310:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	91 f4       	brne	.+36     	; 0x33c <LED_on_only+0x74>
 318:	11 e0       	ldi	r17, 0x01	; 1
 31a:	10 c0       	rjmp	.+32     	; 0x33c <LED_on_only+0x74>
	} else if(pin == LED_YELLOW_PIN) {
 31c:	c1 30       	cpi	r28, 0x01	; 1
 31e:	71 f4       	brne	.+28     	; 0x33c <LED_on_only+0x74>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_RED_PIN), errorState);
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	8d 2f       	mov	r24, r29
 324:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	09 f4       	brne	.+2      	; 0x32e <LED_on_only+0x66>
 32c:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_GREEN_PIN), errorState);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	8d 2f       	mov	r24, r29
 332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LED_off>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	09 f4       	brne	.+2      	; 0x33c <LED_on_only+0x74>
 33a:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	return errorState;
 33c:	81 2f       	mov	r24, r17
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	08 95       	ret

00000346 <main>:

#include "./Application/app.h"

int main(void)
{
	APP_init();
 346:	0e 94 ba 00 	call	0x174	; 0x174 <APP_init>
	
	while(1) {
		APP_start();
 34a:	0e 94 c1 00 	call	0x182	; 0x182 <APP_start>
 34e:	fd cf       	rjmp	.-6      	; 0x34a <main+0x4>

00000350 <DIO_init>:
#include "dio.h"

EN_error_state DIO_init(EN_port_t port, EN_pin_t pin, EN_direction_t direction) {
	// Set the direction of the given pin
	
	switch (port) {
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	11 f1       	breq	.+68     	; 0x398 <DIO_init+0x48>
 354:	30 f0       	brcs	.+12     	; 0x362 <DIO_init+0x12>
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	e9 f1       	breq	.+122    	; 0x3d4 <DIO_init+0x84>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_init+0x10>
 35e:	57 c0       	rjmp	.+174    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 360:	73 c0       	rjmp	.+230    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
 362:	41 11       	cpse	r20, r1
 364:	0d c0       	rjmp	.+26     	; 0x380 <DIO_init+0x30>
 366:	2a b3       	in	r18, 0x1a	; 26
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_init+0x22>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_init+0x1e>
 376:	80 95       	com	r24
 378:	82 23       	and	r24, r18
 37a:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
	// Set the direction of the given pin
	
	switch (port) {
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
 380:	2a b3       	in	r18, 0x1a	; 26
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_init+0x3c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_init+0x38>
 390:	82 2b       	or	r24, r18
 392:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
 398:	41 11       	cpse	r20, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <DIO_init+0x66>
 39c:	27 b3       	in	r18, 0x17	; 23
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_init+0x58>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_init+0x54>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_init+0x6c>
 3ba:	48 c0       	rjmp	.+144    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3bc:	27 b3       	in	r18, 0x17	; 23
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_init+0x78>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_init+0x74>
 3cc:	82 2b       	or	r24, r18
 3ce:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
 3d4:	41 11       	cpse	r20, r1
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <DIO_init+0xa2>
 3d8:	24 b3       	in	r18, 0x14	; 20
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_init+0x94>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_init+0x90>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);
 3f2:	41 30       	cpi	r20, 0x01	; 1
 3f4:	69 f5       	brne	.+90     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3f6:	24 b3       	in	r18, 0x14	; 20
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_init+0xae>
 406:	82 2b       	or	r24, r18
 408:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
 40e:	41 11       	cpse	r20, r1
 410:	0d c0       	rjmp	.+26     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 412:	21 b3       	in	r18, 0x11	; 17
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	80 95       	com	r24
 424:	82 23       	and	r24, r18
 426:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	91 f4       	brne	.+36     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 430:	21 b3       	in	r18, 0x11	; 17
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);

			break;
		default:
			return ERR;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret
	}
	
	return OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	80 e0       	ldi	r24, 0x00	; 0
}
 456:	08 95       	ret

00000458 <DIO_write>:

EN_error_state DIO_write(EN_port_t port, EN_pin_t pin, uint8_t value) {
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	31 f1       	breq	.+76     	; 0x4a8 <DIO_write+0x50>
 45c:	38 f0       	brcs	.+14     	; 0x46c <DIO_write+0x14>
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	09 f4       	brne	.+2      	; 0x464 <DIO_write+0xc>
 462:	40 c0       	rjmp	.+128    	; 0x4e4 <DIO_write+0x8c>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	09 f4       	brne	.+2      	; 0x46a <DIO_write+0x12>
 468:	5a c0       	rjmp	.+180    	; 0x51e <DIO_write+0xc6>
 46a:	76 c0       	rjmp	.+236    	; 0x558 <DIO_write+0x100>
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
 46c:	41 11       	cpse	r20, r1
 46e:	0d c0       	rjmp	.+26     	; 0x48a <DIO_write+0x32>
 470:	2b b3       	in	r18, 0x1b	; 27
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_write+0x24>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_write+0x20>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);
 48a:	41 30       	cpi	r20, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <DIO_write+0x38>
 48e:	66 c0       	rjmp	.+204    	; 0x55c <DIO_write+0x104>
 490:	2b b3       	in	r18, 0x1b	; 27
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_write+0x44>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_write+0x40>
 4a0:	82 2b       	or	r24, r18
 4a2:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
 4a8:	41 11       	cpse	r20, r1
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <DIO_write+0x6e>
 4ac:	28 b3       	in	r18, 0x18	; 24
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0x60>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0x5c>
 4bc:	80 95       	com	r24
 4be:	82 23       	and	r24, r18
 4c0:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);
 4c6:	41 30       	cpi	r20, 0x01	; 1
 4c8:	09 f0       	breq	.+2      	; 0x4cc <DIO_write+0x74>
 4ca:	4a c0       	rjmp	.+148    	; 0x560 <DIO_write+0x108>
 4cc:	28 b3       	in	r18, 0x18	; 24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_write+0x80>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_write+0x7c>
 4dc:	82 2b       	or	r24, r18
 4de:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
 4e4:	41 11       	cpse	r20, r1
 4e6:	0d c0       	rjmp	.+26     	; 0x502 <DIO_write+0xaa>
 4e8:	25 b3       	in	r18, 0x15	; 21
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_write+0x9c>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_write+0x98>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	79 f5       	brne	.+94     	; 0x564 <DIO_write+0x10c>
 506:	25 b3       	in	r18, 0x15	; 21
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_write+0xba>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_write+0xb6>
 516:	82 2b       	or	r24, r18
 518:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	08 95       	ret
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
 51e:	41 11       	cpse	r20, r1
 520:	0d c0       	rjmp	.+26     	; 0x53c <DIO_write+0xe4>
 522:	22 b3       	in	r18, 0x12	; 18
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_write+0xd6>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_write+0xd2>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	a1 f4       	brne	.+40     	; 0x568 <DIO_write+0x110>
 540:	22 b3       	in	r18, 0x12	; 18
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_write+0xf4>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_write+0xf0>
 550:	82 2b       	or	r24, r18
 552:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
			
			break;
		default:
			return ERR;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
	}
	
	return OK;
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	08 95       	ret
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	08 95       	ret
 568:	80 e0       	ldi	r24, 0x00	; 0
}
 56a:	08 95       	ret

0000056c <DIO_toggle>:

EN_error_state DIO_toggle(EN_port_t port, EN_pin_t pin) {
	// Toggle the state of the given pin

	switch (port) {
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	91 f0       	breq	.+36     	; 0x594 <DIO_toggle+0x28>
 570:	28 f0       	brcs	.+10     	; 0x57c <DIO_toggle+0x10>
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	d9 f0       	breq	.+54     	; 0x5ac <DIO_toggle+0x40>
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	29 f1       	breq	.+74     	; 0x5c4 <DIO_toggle+0x58>
 57a:	30 c0       	rjmp	.+96     	; 0x5dc <DIO_toggle+0x70>
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
 57c:	2b b3       	in	r18, 0x1b	; 27
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_toggle+0x1c>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_toggle+0x18>
 58c:	82 27       	eor	r24, r18
 58e:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 590:	80 e0       	ldi	r24, 0x00	; 0
	// Toggle the state of the given pin

	switch (port) {
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
 592:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
 594:	28 b3       	in	r18, 0x18	; 24
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_toggle+0x34>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	6a 95       	dec	r22
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_toggle+0x30>
 5a4:	82 27       	eor	r24, r18
 5a6:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
 5aa:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
 5ac:	25 b3       	in	r18, 0x15	; 21
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_toggle+0x4c>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_toggle+0x48>
 5bc:	82 27       	eor	r24, r18
 5be:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
 5c2:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
 5c4:	22 b3       	in	r18, 0x12	; 18
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_toggle+0x64>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_toggle+0x60>
 5d4:	82 27       	eor	r24, r18
 5d6:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 5d8:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
			break;
 5da:	08 95       	ret
		default:
			return ERR;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return OK;
}
 5de:	08 95       	ret

000005e0 <INTERRUPTS_init>:

#include "interrupts.h"

void INTERRUPTS_init() {
	// Enable global interrupt
	sei();
 5e0:	78 94       	sei
	
	// Set INT0 sense to rising edge
	MCUCR |= (1 << 0) | (1 << 1);
 5e2:	85 b7       	in	r24, 0x35	; 53
 5e4:	83 60       	ori	r24, 0x03	; 3
 5e6:	85 bf       	out	0x35, r24	; 53
	
	// Enable INT0
	SET_BIT(GICR, 6);
 5e8:	8b b7       	in	r24, 0x3b	; 59
 5ea:	80 64       	ori	r24, 0x40	; 64
 5ec:	8b bf       	out	0x3b, r24	; 59
 5ee:	08 95       	ret

000005f0 <__vector_1>:
	}
	
	return 0;
}

ISR(EXT_INT_0) {
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
	pressed = 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <pressed+0x1>
 606:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <pressed>
}
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <TIMER_init>:
#include "timer.h"
#include <math.h>

void TIMER_init() {
	// Set timer mode to normal
	TCCR0 = 0X00;
 618:	13 be       	out	0x33, r1	; 51
	
	// Set timer initial value to 0
	TCNT0 = 0x00;
 61a:	12 be       	out	0x32, r1	; 50
 61c:	08 95       	ret

0000061e <TIMER_start>:
}

EN_error_state TIMER_start(uint16_t prescaler, uint8_t initialValue)
{
	// Set initial value
	TCNT0 = initialValue;
 61e:	62 bf       	out	0x32, r22	; 50
	
	// Set prescaler, after which the timer starts
	switch (prescaler) {
 620:	80 34       	cpi	r24, 0x40	; 64
 622:	91 05       	cpc	r25, r1
 624:	c9 f0       	breq	.+50     	; 0x658 <TIMER_start+0x3a>
 626:	30 f4       	brcc	.+12     	; 0x634 <TIMER_start+0x16>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	91 05       	cpc	r25, r1
 62c:	59 f0       	breq	.+22     	; 0x644 <TIMER_start+0x26>
 62e:	08 97       	sbiw	r24, 0x08	; 8
 630:	71 f0       	breq	.+28     	; 0x64e <TIMER_start+0x30>
 632:	21 c0       	rjmp	.+66     	; 0x676 <TIMER_start+0x58>
 634:	81 15       	cp	r24, r1
 636:	21 e0       	ldi	r18, 0x01	; 1
 638:	92 07       	cpc	r25, r18
 63a:	99 f0       	breq	.+38     	; 0x662 <TIMER_start+0x44>
 63c:	81 15       	cp	r24, r1
 63e:	94 40       	sbci	r25, 0x04	; 4
 640:	a9 f0       	breq	.+42     	; 0x66c <TIMER_start+0x4e>
 642:	19 c0       	rjmp	.+50     	; 0x676 <TIMER_start+0x58>
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
 644:	83 b7       	in	r24, 0x33	; 51
 646:	81 60       	ori	r24, 0x01	; 1
 648:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
	// Set prescaler, after which the timer starts
	switch (prescaler) {
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
			break;
 64c:	08 95       	ret
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	82 60       	ori	r24, 0x02	; 2
 652:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 654:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 0);
			break;
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
			break;
 656:	08 95       	ret
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	83 60       	ori	r24, 0x03	; 3
 65c:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 65e:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 1);
			break;
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
			break;
 660:	08 95       	ret
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
 662:	83 b7       	in	r24, 0x33	; 51
 664:	84 60       	ori	r24, 0x04	; 4
 666:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= 3;
			break;
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
			break;
 66a:	08 95       	ret
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	85 60       	ori	r24, 0x05	; 5
 670:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 672:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 2);
			break;
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
			break;
 674:	08 95       	ret
		default:
			return ERR;
 676:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	
	return OK;
	
}
 678:	08 95       	ret

0000067a <TIMER_stop>:

void TIMER_stop()
{
	// Set prescaler to zero
	TCCR0 = 0x00;
 67a:	13 be       	out	0x33, r1	; 51
 67c:	08 95       	ret

0000067e <TIMER_delay>:
}

EN_error_state TIMER_delay(float delay_in_ms, uint16_t prescaler)
{		
 67e:	8f 92       	push	r8
 680:	9f 92       	push	r9
 682:	af 92       	push	r10
 684:	bf 92       	push	r11
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	6b 01       	movw	r12, r22
 698:	7c 01       	movw	r14, r24
 69a:	8a 01       	movw	r16, r20
	// Timer calculations
	double clk_freq = 1000000; // 10^6
	int timer_max_count = 256; // 8^2

	double tick = ((double) prescaler / clk_freq) * 1000;
 69c:	ba 01       	movw	r22, r20
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__floatunsisf>
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	34 e2       	ldi	r19, 0x24	; 36
 6aa:	44 e7       	ldi	r20, 0x74	; 116
 6ac:	59 e4       	ldi	r21, 0x49	; 73
 6ae:	0e 94 43 04 	call	0x886	; 0x886 <__divsf3>
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	4a e7       	ldi	r20, 0x7A	; 122
 6b8:	54 e4       	ldi	r21, 0x44	; 68
 6ba:	0e 94 ba 05 	call	0xb74	; 0xb74 <__mulsf3>
 6be:	4b 01       	movw	r8, r22
 6c0:	5c 01       	movw	r10, r24
	double max_delay = tick * timer_max_count;
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 e8       	ldi	r20, 0x80	; 128
 6c8:	53 e4       	ldi	r21, 0x43	; 67
 6ca:	0e 94 ba 05 	call	0xb74	; 0xb74 <__mulsf3>
 6ce:	9b 01       	movw	r18, r22
 6d0:	ac 01       	movw	r20, r24
	int num_overflows = (int) ceil(delay_in_ms / max_delay);
 6d2:	c7 01       	movw	r24, r14
 6d4:	b6 01       	movw	r22, r12
 6d6:	0e 94 43 04 	call	0x886	; 0x886 <__divsf3>
 6da:	0e 94 2c 04 	call	0x858	; 0x858 <ceil>
 6de:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
 6e2:	eb 01       	movw	r28, r22
	int initial_value = (int)(timer_max_count - (delay_in_ms / tick) / 2);
 6e4:	a5 01       	movw	r20, r10
 6e6:	94 01       	movw	r18, r8
 6e8:	c7 01       	movw	r24, r14
 6ea:	b6 01       	movw	r22, r12
 6ec:	0e 94 43 04 	call	0x886	; 0x886 <__divsf3>
 6f0:	20 e0       	ldi	r18, 0x00	; 0
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	5f e3       	ldi	r21, 0x3F	; 63
 6f8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__mulsf3>
 6fc:	9b 01       	movw	r18, r22
 6fe:	ac 01       	movw	r20, r24
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	80 e8       	ldi	r24, 0x80	; 128
 706:	93 e4       	ldi	r25, 0x43	; 67
 708:	0e 94 bf 03 	call	0x77e	; 0x77e <__subsf3>
 70c:	0e 94 b5 04 	call	0x96a	; 0x96a <__fixsfsi>
	
	// Start timer and count overflows until given delay
	EN_error_state errorState = TIMER_start(prescaler, initial_value);
 710:	c8 01       	movw	r24, r16
 712:	0e 94 0f 03 	call	0x61e	; 0x61e <TIMER_start>
 716:	18 2f       	mov	r17, r24
	
	if(errorState == OK) {
 718:	88 23       	and	r24, r24
 71a:	51 f0       	breq	.+20     	; 0x730 <TIMER_delay+0xb2>
 71c:	10 c0       	rjmp	.+32     	; 0x73e <TIMER_delay+0xc0>
		uint32_t overflow_counter = 0;
		while (overflow_counter < num_overflows)
		{
			// Wait for the overflow flag to be set
			while ((TIFR & (1 << 0)) == 0) {}
 71e:	08 b6       	in	r0, 0x38	; 56
 720:	00 fe       	sbrs	r0, 0
 722:	fd cf       	rjmp	.-6      	; 0x71e <TIMER_delay+0xa0>
			
			// Clear the overflow flag
			TIFR |= (1 << 0);
 724:	88 b7       	in	r24, 0x38	; 56
 726:	81 60       	ori	r24, 0x01	; 1
 728:	88 bf       	out	0x38, r24	; 56
		
			overflow_counter++;
 72a:	2f 5f       	subi	r18, 0xFF	; 255
 72c:	3f 4f       	sbci	r19, 0xFF	; 255
 72e:	02 c0       	rjmp	.+4      	; 0x734 <TIMER_delay+0xb6>
 730:	20 e0       	ldi	r18, 0x00	; 0
 732:	30 e0       	ldi	r19, 0x00	; 0
	// Start timer and count overflows until given delay
	EN_error_state errorState = TIMER_start(prescaler, initial_value);
	
	if(errorState == OK) {
		uint32_t overflow_counter = 0;
		while (overflow_counter < num_overflows)
 734:	2c 17       	cp	r18, r28
 736:	3d 07       	cpc	r19, r29
 738:	90 f3       	brcs	.-28     	; 0x71e <TIMER_delay+0xa0>
			TIFR |= (1 << 0);
		
			overflow_counter++;
		}
	
		TIMER_stop();
 73a:	0e 94 3d 03 	call	0x67a	; 0x67a <TIMER_stop>
	}
	
	return errorState;
}
 73e:	81 2f       	mov	r24, r17
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	1f 91       	pop	r17
 746:	0f 91       	pop	r16
 748:	ff 90       	pop	r15
 74a:	ef 90       	pop	r14
 74c:	df 90       	pop	r13
 74e:	cf 90       	pop	r12
 750:	bf 90       	pop	r11
 752:	af 90       	pop	r10
 754:	9f 90       	pop	r9
 756:	8f 90       	pop	r8
 758:	08 95       	ret

0000075a <TIMER_delay_5s>:

EN_error_state TIMER_delay_5s() {
	return TIMER_delay(5000, 1024);
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	54 e0       	ldi	r21, 0x04	; 4
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	70 e4       	ldi	r23, 0x40	; 64
 762:	8c e9       	ldi	r24, 0x9C	; 156
 764:	95 e4       	ldi	r25, 0x45	; 69
 766:	0e 94 3f 03 	call	0x67e	; 0x67e <TIMER_delay>
}
 76a:	08 95       	ret

0000076c <TIMER_delay_1s>:

EN_error_state TIMER_delay_1s() {
	return TIMER_delay(1000, 1024);
 76c:	40 e0       	ldi	r20, 0x00	; 0
 76e:	54 e0       	ldi	r21, 0x04	; 4
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	8a e7       	ldi	r24, 0x7A	; 122
 776:	94 e4       	ldi	r25, 0x44	; 68
 778:	0e 94 3f 03 	call	0x67e	; 0x67e <TIMER_delay>
}
 77c:	08 95       	ret

0000077e <__subsf3>:
 77e:	50 58       	subi	r21, 0x80	; 128

00000780 <__addsf3>:
 780:	bb 27       	eor	r27, r27
 782:	aa 27       	eor	r26, r26
 784:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__addsf3x>
 788:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_round>
 78c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_pscA>
 790:	38 f0       	brcs	.+14     	; 0x7a0 <__addsf3+0x20>
 792:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_pscB>
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__addsf3+0x20>
 798:	39 f4       	brne	.+14     	; 0x7a8 <__addsf3+0x28>
 79a:	9f 3f       	cpi	r25, 0xFF	; 255
 79c:	19 f4       	brne	.+6      	; 0x7a4 <__addsf3+0x24>
 79e:	26 f4       	brtc	.+8      	; 0x7a8 <__addsf3+0x28>
 7a0:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_nan>
 7a4:	0e f4       	brtc	.+2      	; 0x7a8 <__addsf3+0x28>
 7a6:	e0 95       	com	r30
 7a8:	e7 fb       	bst	r30, 7
 7aa:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>

000007ae <__addsf3x>:
 7ae:	e9 2f       	mov	r30, r25
 7b0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_split3>
 7b4:	58 f3       	brcs	.-42     	; 0x78c <__addsf3+0xc>
 7b6:	ba 17       	cp	r27, r26
 7b8:	62 07       	cpc	r22, r18
 7ba:	73 07       	cpc	r23, r19
 7bc:	84 07       	cpc	r24, r20
 7be:	95 07       	cpc	r25, r21
 7c0:	20 f0       	brcs	.+8      	; 0x7ca <__addsf3x+0x1c>
 7c2:	79 f4       	brne	.+30     	; 0x7e2 <__addsf3x+0x34>
 7c4:	a6 f5       	brtc	.+104    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7c6:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_zero>
 7ca:	0e f4       	brtc	.+2      	; 0x7ce <__addsf3x+0x20>
 7cc:	e0 95       	com	r30
 7ce:	0b 2e       	mov	r0, r27
 7d0:	ba 2f       	mov	r27, r26
 7d2:	a0 2d       	mov	r26, r0
 7d4:	0b 01       	movw	r0, r22
 7d6:	b9 01       	movw	r22, r18
 7d8:	90 01       	movw	r18, r0
 7da:	0c 01       	movw	r0, r24
 7dc:	ca 01       	movw	r24, r20
 7de:	a0 01       	movw	r20, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	ff 27       	eor	r31, r31
 7e4:	59 1b       	sub	r21, r25
 7e6:	99 f0       	breq	.+38     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e8:	59 3f       	cpi	r21, 0xF9	; 249
 7ea:	50 f4       	brcc	.+20     	; 0x800 <__DATA_REGION_LENGTH__>
 7ec:	50 3e       	cpi	r21, 0xE0	; 224
 7ee:	68 f1       	brcs	.+90     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7f0:	1a 16       	cp	r1, r26
 7f2:	f0 40       	sbci	r31, 0x00	; 0
 7f4:	a2 2f       	mov	r26, r18
 7f6:	23 2f       	mov	r18, r19
 7f8:	34 2f       	mov	r19, r20
 7fa:	44 27       	eor	r20, r20
 7fc:	58 5f       	subi	r21, 0xF8	; 248
 7fe:	f3 cf       	rjmp	.-26     	; 0x7e6 <__addsf3x+0x38>
 800:	46 95       	lsr	r20
 802:	37 95       	ror	r19
 804:	27 95       	ror	r18
 806:	a7 95       	ror	r26
 808:	f0 40       	sbci	r31, 0x00	; 0
 80a:	53 95       	inc	r21
 80c:	c9 f7       	brne	.-14     	; 0x800 <__DATA_REGION_LENGTH__>
 80e:	7e f4       	brtc	.+30     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 810:	1f 16       	cp	r1, r31
 812:	ba 0b       	sbc	r27, r26
 814:	62 0b       	sbc	r22, r18
 816:	73 0b       	sbc	r23, r19
 818:	84 0b       	sbc	r24, r20
 81a:	ba f0       	brmi	.+46     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 81c:	91 50       	subi	r25, 0x01	; 1
 81e:	a1 f0       	breq	.+40     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 820:	ff 0f       	add	r31, r31
 822:	bb 1f       	adc	r27, r27
 824:	66 1f       	adc	r22, r22
 826:	77 1f       	adc	r23, r23
 828:	88 1f       	adc	r24, r24
 82a:	c2 f7       	brpl	.-16     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82c:	0e c0       	rjmp	.+28     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 82e:	ba 0f       	add	r27, r26
 830:	62 1f       	adc	r22, r18
 832:	73 1f       	adc	r23, r19
 834:	84 1f       	adc	r24, r20
 836:	48 f4       	brcc	.+18     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 838:	87 95       	ror	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b7 95       	ror	r27
 840:	f7 95       	ror	r31
 842:	9e 3f       	cpi	r25, 0xFE	; 254
 844:	08 f0       	brcs	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 846:	b0 cf       	rjmp	.-160    	; 0x7a8 <__addsf3+0x28>
 848:	93 95       	inc	r25
 84a:	88 0f       	add	r24, r24
 84c:	08 f0       	brcs	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	99 27       	eor	r25, r25
 850:	ee 0f       	add	r30, r30
 852:	97 95       	ror	r25
 854:	87 95       	ror	r24
 856:	08 95       	ret

00000858 <ceil>:
 858:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_trunc>
 85c:	90 f0       	brcs	.+36     	; 0x882 <__stack+0x23>
 85e:	9f 37       	cpi	r25, 0x7F	; 127
 860:	48 f4       	brcc	.+18     	; 0x874 <__stack+0x15>
 862:	91 11       	cpse	r25, r1
 864:	16 f4       	brtc	.+4      	; 0x86a <__stack+0xb>
 866:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	80 e8       	ldi	r24, 0x80	; 128
 870:	9f e3       	ldi	r25, 0x3F	; 63
 872:	08 95       	ret
 874:	26 f0       	brts	.+8      	; 0x87e <__stack+0x1f>
 876:	1b 16       	cp	r1, r27
 878:	61 1d       	adc	r22, r1
 87a:	71 1d       	adc	r23, r1
 87c:	81 1d       	adc	r24, r1
 87e:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_mintl>
 882:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_mpack>

00000886 <__divsf3>:
 886:	0e 94 57 04 	call	0x8ae	; 0x8ae <__divsf3x>
 88a:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_round>
 88e:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_pscB>
 892:	58 f0       	brcs	.+22     	; 0x8aa <__divsf3+0x24>
 894:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_pscA>
 898:	40 f0       	brcs	.+16     	; 0x8aa <__divsf3+0x24>
 89a:	29 f4       	brne	.+10     	; 0x8a6 <__divsf3+0x20>
 89c:	5f 3f       	cpi	r21, 0xFF	; 255
 89e:	29 f0       	breq	.+10     	; 0x8aa <__divsf3+0x24>
 8a0:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 8a4:	51 11       	cpse	r21, r1
 8a6:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
 8aa:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_nan>

000008ae <__divsf3x>:
 8ae:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_split3>
 8b2:	68 f3       	brcs	.-38     	; 0x88e <__divsf3+0x8>

000008b4 <__divsf3_pse>:
 8b4:	99 23       	and	r25, r25
 8b6:	b1 f3       	breq	.-20     	; 0x8a4 <__divsf3+0x1e>
 8b8:	55 23       	and	r21, r21
 8ba:	91 f3       	breq	.-28     	; 0x8a0 <__divsf3+0x1a>
 8bc:	95 1b       	sub	r25, r21
 8be:	55 0b       	sbc	r21, r21
 8c0:	bb 27       	eor	r27, r27
 8c2:	aa 27       	eor	r26, r26
 8c4:	62 17       	cp	r22, r18
 8c6:	73 07       	cpc	r23, r19
 8c8:	84 07       	cpc	r24, r20
 8ca:	38 f0       	brcs	.+14     	; 0x8da <__divsf3_pse+0x26>
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	5f 4f       	sbci	r21, 0xFF	; 255
 8d0:	22 0f       	add	r18, r18
 8d2:	33 1f       	adc	r19, r19
 8d4:	44 1f       	adc	r20, r20
 8d6:	aa 1f       	adc	r26, r26
 8d8:	a9 f3       	breq	.-22     	; 0x8c4 <__divsf3_pse+0x10>
 8da:	35 d0       	rcall	.+106    	; 0x946 <__divsf3_pse+0x92>
 8dc:	0e 2e       	mov	r0, r30
 8de:	3a f0       	brmi	.+14     	; 0x8ee <__divsf3_pse+0x3a>
 8e0:	e0 e8       	ldi	r30, 0x80	; 128
 8e2:	32 d0       	rcall	.+100    	; 0x948 <__divsf3_pse+0x94>
 8e4:	91 50       	subi	r25, 0x01	; 1
 8e6:	50 40       	sbci	r21, 0x00	; 0
 8e8:	e6 95       	lsr	r30
 8ea:	00 1c       	adc	r0, r0
 8ec:	ca f7       	brpl	.-14     	; 0x8e0 <__divsf3_pse+0x2c>
 8ee:	2b d0       	rcall	.+86     	; 0x946 <__divsf3_pse+0x92>
 8f0:	fe 2f       	mov	r31, r30
 8f2:	29 d0       	rcall	.+82     	; 0x946 <__divsf3_pse+0x92>
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	bb 1f       	adc	r27, r27
 8fc:	26 17       	cp	r18, r22
 8fe:	37 07       	cpc	r19, r23
 900:	48 07       	cpc	r20, r24
 902:	ab 07       	cpc	r26, r27
 904:	b0 e8       	ldi	r27, 0x80	; 128
 906:	09 f0       	breq	.+2      	; 0x90a <__divsf3_pse+0x56>
 908:	bb 0b       	sbc	r27, r27
 90a:	80 2d       	mov	r24, r0
 90c:	bf 01       	movw	r22, r30
 90e:	ff 27       	eor	r31, r31
 910:	93 58       	subi	r25, 0x83	; 131
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	3a f0       	brmi	.+14     	; 0x924 <__divsf3_pse+0x70>
 916:	9e 3f       	cpi	r25, 0xFE	; 254
 918:	51 05       	cpc	r21, r1
 91a:	78 f0       	brcs	.+30     	; 0x93a <__divsf3_pse+0x86>
 91c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 920:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
 924:	5f 3f       	cpi	r21, 0xFF	; 255
 926:	e4 f3       	brlt	.-8      	; 0x920 <__divsf3_pse+0x6c>
 928:	98 3e       	cpi	r25, 0xE8	; 232
 92a:	d4 f3       	brlt	.-12     	; 0x920 <__divsf3_pse+0x6c>
 92c:	86 95       	lsr	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b7 95       	ror	r27
 934:	f7 95       	ror	r31
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	c9 f7       	brne	.-14     	; 0x92c <__divsf3_pse+0x78>
 93a:	88 0f       	add	r24, r24
 93c:	91 1d       	adc	r25, r1
 93e:	96 95       	lsr	r25
 940:	87 95       	ror	r24
 942:	97 f9       	bld	r25, 7
 944:	08 95       	ret
 946:	e1 e0       	ldi	r30, 0x01	; 1
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	bb 1f       	adc	r27, r27
 950:	62 17       	cp	r22, r18
 952:	73 07       	cpc	r23, r19
 954:	84 07       	cpc	r24, r20
 956:	ba 07       	cpc	r27, r26
 958:	20 f0       	brcs	.+8      	; 0x962 <__divsf3_pse+0xae>
 95a:	62 1b       	sub	r22, r18
 95c:	73 0b       	sbc	r23, r19
 95e:	84 0b       	sbc	r24, r20
 960:	ba 0b       	sbc	r27, r26
 962:	ee 1f       	adc	r30, r30
 964:	88 f7       	brcc	.-30     	; 0x948 <__divsf3_pse+0x94>
 966:	e0 95       	com	r30
 968:	08 95       	ret

0000096a <__fixsfsi>:
 96a:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
 96e:	68 94       	set
 970:	b1 11       	cpse	r27, r1
 972:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
 976:	08 95       	ret

00000978 <__fixunssfsi>:
 978:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_splitA>
 97c:	88 f0       	brcs	.+34     	; 0x9a0 <__fixunssfsi+0x28>
 97e:	9f 57       	subi	r25, 0x7F	; 127
 980:	98 f0       	brcs	.+38     	; 0x9a8 <__fixunssfsi+0x30>
 982:	b9 2f       	mov	r27, r25
 984:	99 27       	eor	r25, r25
 986:	b7 51       	subi	r27, 0x17	; 23
 988:	b0 f0       	brcs	.+44     	; 0x9b6 <__fixunssfsi+0x3e>
 98a:	e1 f0       	breq	.+56     	; 0x9c4 <__fixunssfsi+0x4c>
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	1a f0       	brmi	.+6      	; 0x99c <__fixunssfsi+0x24>
 996:	ba 95       	dec	r27
 998:	c9 f7       	brne	.-14     	; 0x98c <__fixunssfsi+0x14>
 99a:	14 c0       	rjmp	.+40     	; 0x9c4 <__fixunssfsi+0x4c>
 99c:	b1 30       	cpi	r27, 0x01	; 1
 99e:	91 f0       	breq	.+36     	; 0x9c4 <__fixunssfsi+0x4c>
 9a0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_zero>
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	08 95       	ret
 9a8:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_zero>
 9ac:	67 2f       	mov	r22, r23
 9ae:	78 2f       	mov	r23, r24
 9b0:	88 27       	eor	r24, r24
 9b2:	b8 5f       	subi	r27, 0xF8	; 248
 9b4:	39 f0       	breq	.+14     	; 0x9c4 <__fixunssfsi+0x4c>
 9b6:	b9 3f       	cpi	r27, 0xF9	; 249
 9b8:	cc f3       	brlt	.-14     	; 0x9ac <__fixunssfsi+0x34>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b3 95       	inc	r27
 9c2:	d9 f7       	brne	.-10     	; 0x9ba <__fixunssfsi+0x42>
 9c4:	3e f4       	brtc	.+14     	; 0x9d4 <__fixunssfsi+0x5c>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	08 95       	ret

000009d6 <__floatunsisf>:
 9d6:	e8 94       	clt
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__floatsisf+0x12>

000009da <__floatsisf>:
 9da:	97 fb       	bst	r25, 7
 9dc:	3e f4       	brtc	.+14     	; 0x9ec <__floatsisf+0x12>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	99 23       	and	r25, r25
 9ee:	a9 f0       	breq	.+42     	; 0xa1a <__floatsisf+0x40>
 9f0:	f9 2f       	mov	r31, r25
 9f2:	96 e9       	ldi	r25, 0x96	; 150
 9f4:	bb 27       	eor	r27, r27
 9f6:	93 95       	inc	r25
 9f8:	f6 95       	lsr	r31
 9fa:	87 95       	ror	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b7 95       	ror	r27
 a02:	f1 11       	cpse	r31, r1
 a04:	f8 cf       	rjmp	.-16     	; 0x9f6 <__floatsisf+0x1c>
 a06:	fa f4       	brpl	.+62     	; 0xa46 <__floatsisf+0x6c>
 a08:	bb 0f       	add	r27, r27
 a0a:	11 f4       	brne	.+4      	; 0xa10 <__floatsisf+0x36>
 a0c:	60 ff       	sbrs	r22, 0
 a0e:	1b c0       	rjmp	.+54     	; 0xa46 <__floatsisf+0x6c>
 a10:	6f 5f       	subi	r22, 0xFF	; 255
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <__floatsisf+0x6c>
 a1a:	88 23       	and	r24, r24
 a1c:	11 f0       	breq	.+4      	; 0xa22 <__floatsisf+0x48>
 a1e:	96 e9       	ldi	r25, 0x96	; 150
 a20:	11 c0       	rjmp	.+34     	; 0xa44 <__floatsisf+0x6a>
 a22:	77 23       	and	r23, r23
 a24:	21 f0       	breq	.+8      	; 0xa2e <__floatsisf+0x54>
 a26:	9e e8       	ldi	r25, 0x8E	; 142
 a28:	87 2f       	mov	r24, r23
 a2a:	76 2f       	mov	r23, r22
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__floatsisf+0x5e>
 a2e:	66 23       	and	r22, r22
 a30:	71 f0       	breq	.+28     	; 0xa4e <__floatsisf+0x74>
 a32:	96 e8       	ldi	r25, 0x86	; 134
 a34:	86 2f       	mov	r24, r22
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	2a f0       	brmi	.+10     	; 0xa46 <__floatsisf+0x6c>
 a3c:	9a 95       	dec	r25
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	da f7       	brpl	.-10     	; 0xa3c <__floatsisf+0x62>
 a46:	88 0f       	add	r24, r24
 a48:	96 95       	lsr	r25
 a4a:	87 95       	ror	r24
 a4c:	97 f9       	bld	r25, 7
 a4e:	08 95       	ret

00000a50 <__fp_inf>:
 a50:	97 f9       	bld	r25, 7
 a52:	9f 67       	ori	r25, 0x7F	; 127
 a54:	80 e8       	ldi	r24, 0x80	; 128
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	08 95       	ret

00000a5c <__fp_mintl>:
 a5c:	88 23       	and	r24, r24
 a5e:	71 f4       	brne	.+28     	; 0xa7c <__fp_mintl+0x20>
 a60:	77 23       	and	r23, r23
 a62:	21 f0       	breq	.+8      	; 0xa6c <__fp_mintl+0x10>
 a64:	98 50       	subi	r25, 0x08	; 8
 a66:	87 2b       	or	r24, r23
 a68:	76 2f       	mov	r23, r22
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__fp_mintl+0x1e>
 a6c:	66 23       	and	r22, r22
 a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_mintl+0x18>
 a70:	99 27       	eor	r25, r25
 a72:	0d c0       	rjmp	.+26     	; 0xa8e <__fp_mintl+0x32>
 a74:	90 51       	subi	r25, 0x10	; 16
 a76:	86 2b       	or	r24, r22
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	2a f0       	brmi	.+10     	; 0xa88 <__fp_mintl+0x2c>
 a7e:	9a 95       	dec	r25
 a80:	66 0f       	add	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	da f7       	brpl	.-10     	; 0xa7e <__fp_mintl+0x22>
 a88:	88 0f       	add	r24, r24
 a8a:	96 95       	lsr	r25
 a8c:	87 95       	ror	r24
 a8e:	97 f9       	bld	r25, 7
 a90:	08 95       	ret

00000a92 <__fp_mpack>:
 a92:	9f 3f       	cpi	r25, 0xFF	; 255
 a94:	31 f0       	breq	.+12     	; 0xaa2 <__fp_mpack_finite+0xc>

00000a96 <__fp_mpack_finite>:
 a96:	91 50       	subi	r25, 0x01	; 1
 a98:	20 f4       	brcc	.+8      	; 0xaa2 <__fp_mpack_finite+0xc>
 a9a:	87 95       	ror	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	b7 95       	ror	r27
 aa2:	88 0f       	add	r24, r24
 aa4:	91 1d       	adc	r25, r1
 aa6:	96 95       	lsr	r25
 aa8:	87 95       	ror	r24
 aaa:	97 f9       	bld	r25, 7
 aac:	08 95       	ret

00000aae <__fp_nan>:
 aae:	9f ef       	ldi	r25, 0xFF	; 255
 ab0:	80 ec       	ldi	r24, 0xC0	; 192
 ab2:	08 95       	ret

00000ab4 <__fp_pscA>:
 ab4:	00 24       	eor	r0, r0
 ab6:	0a 94       	dec	r0
 ab8:	16 16       	cp	r1, r22
 aba:	17 06       	cpc	r1, r23
 abc:	18 06       	cpc	r1, r24
 abe:	09 06       	cpc	r0, r25
 ac0:	08 95       	ret

00000ac2 <__fp_pscB>:
 ac2:	00 24       	eor	r0, r0
 ac4:	0a 94       	dec	r0
 ac6:	12 16       	cp	r1, r18
 ac8:	13 06       	cpc	r1, r19
 aca:	14 06       	cpc	r1, r20
 acc:	05 06       	cpc	r0, r21
 ace:	08 95       	ret

00000ad0 <__fp_round>:
 ad0:	09 2e       	mov	r0, r25
 ad2:	03 94       	inc	r0
 ad4:	00 0c       	add	r0, r0
 ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_round+0xc>
 ad8:	88 23       	and	r24, r24
 ada:	52 f0       	brmi	.+20     	; 0xaf0 <__fp_round+0x20>
 adc:	bb 0f       	add	r27, r27
 ade:	40 f4       	brcc	.+16     	; 0xaf0 <__fp_round+0x20>
 ae0:	bf 2b       	or	r27, r31
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0x18>
 ae4:	60 ff       	sbrs	r22, 0
 ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__fp_round+0x20>
 ae8:	6f 5f       	subi	r22, 0xFF	; 255
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	08 95       	ret

00000af2 <__fp_split3>:
 af2:	57 fd       	sbrc	r21, 7
 af4:	90 58       	subi	r25, 0x80	; 128
 af6:	44 0f       	add	r20, r20
 af8:	55 1f       	adc	r21, r21
 afa:	59 f0       	breq	.+22     	; 0xb12 <__fp_splitA+0x10>
 afc:	5f 3f       	cpi	r21, 0xFF	; 255
 afe:	71 f0       	breq	.+28     	; 0xb1c <__fp_splitA+0x1a>
 b00:	47 95       	ror	r20

00000b02 <__fp_splitA>:
 b02:	88 0f       	add	r24, r24
 b04:	97 fb       	bst	r25, 7
 b06:	99 1f       	adc	r25, r25
 b08:	61 f0       	breq	.+24     	; 0xb22 <__fp_splitA+0x20>
 b0a:	9f 3f       	cpi	r25, 0xFF	; 255
 b0c:	79 f0       	breq	.+30     	; 0xb2c <__fp_splitA+0x2a>
 b0e:	87 95       	ror	r24
 b10:	08 95       	ret
 b12:	12 16       	cp	r1, r18
 b14:	13 06       	cpc	r1, r19
 b16:	14 06       	cpc	r1, r20
 b18:	55 1f       	adc	r21, r21
 b1a:	f2 cf       	rjmp	.-28     	; 0xb00 <__fp_split3+0xe>
 b1c:	46 95       	lsr	r20
 b1e:	f1 df       	rcall	.-30     	; 0xb02 <__fp_splitA>
 b20:	08 c0       	rjmp	.+16     	; 0xb32 <__fp_splitA+0x30>
 b22:	16 16       	cp	r1, r22
 b24:	17 06       	cpc	r1, r23
 b26:	18 06       	cpc	r1, r24
 b28:	99 1f       	adc	r25, r25
 b2a:	f1 cf       	rjmp	.-30     	; 0xb0e <__fp_splitA+0xc>
 b2c:	86 95       	lsr	r24
 b2e:	71 05       	cpc	r23, r1
 b30:	61 05       	cpc	r22, r1
 b32:	08 94       	sec
 b34:	08 95       	ret

00000b36 <__fp_trunc>:
 b36:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_splitA>
 b3a:	a0 f0       	brcs	.+40     	; 0xb64 <__fp_trunc+0x2e>
 b3c:	be e7       	ldi	r27, 0x7E	; 126
 b3e:	b9 17       	cp	r27, r25
 b40:	88 f4       	brcc	.+34     	; 0xb64 <__fp_trunc+0x2e>
 b42:	bb 27       	eor	r27, r27
 b44:	9f 38       	cpi	r25, 0x8F	; 143
 b46:	60 f4       	brcc	.+24     	; 0xb60 <__fp_trunc+0x2a>
 b48:	16 16       	cp	r1, r22
 b4a:	b1 1d       	adc	r27, r1
 b4c:	67 2f       	mov	r22, r23
 b4e:	78 2f       	mov	r23, r24
 b50:	88 27       	eor	r24, r24
 b52:	98 5f       	subi	r25, 0xF8	; 248
 b54:	f7 cf       	rjmp	.-18     	; 0xb44 <__fp_trunc+0xe>
 b56:	86 95       	lsr	r24
 b58:	77 95       	ror	r23
 b5a:	67 95       	ror	r22
 b5c:	b1 1d       	adc	r27, r1
 b5e:	93 95       	inc	r25
 b60:	96 39       	cpi	r25, 0x96	; 150
 b62:	c8 f3       	brcs	.-14     	; 0xb56 <__fp_trunc+0x20>
 b64:	08 95       	ret

00000b66 <__fp_zero>:
 b66:	e8 94       	clt

00000b68 <__fp_szero>:
 b68:	bb 27       	eor	r27, r27
 b6a:	66 27       	eor	r22, r22
 b6c:	77 27       	eor	r23, r23
 b6e:	cb 01       	movw	r24, r22
 b70:	97 f9       	bld	r25, 7
 b72:	08 95       	ret

00000b74 <__mulsf3>:
 b74:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__mulsf3x>
 b78:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_round>
 b7c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_pscA>
 b80:	38 f0       	brcs	.+14     	; 0xb90 <__mulsf3+0x1c>
 b82:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_pscB>
 b86:	20 f0       	brcs	.+8      	; 0xb90 <__mulsf3+0x1c>
 b88:	95 23       	and	r25, r21
 b8a:	11 f0       	breq	.+4      	; 0xb90 <__mulsf3+0x1c>
 b8c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 b90:	0c 94 57 05 	jmp	0xaae	; 0xaae <__fp_nan>
 b94:	11 24       	eor	r1, r1
 b96:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>

00000b9a <__mulsf3x>:
 b9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_split3>
 b9e:	70 f3       	brcs	.-36     	; 0xb7c <__mulsf3+0x8>

00000ba0 <__mulsf3_pse>:
 ba0:	95 9f       	mul	r25, r21
 ba2:	c1 f3       	breq	.-16     	; 0xb94 <__mulsf3+0x20>
 ba4:	95 0f       	add	r25, r21
 ba6:	50 e0       	ldi	r21, 0x00	; 0
 ba8:	55 1f       	adc	r21, r21
 baa:	62 9f       	mul	r22, r18
 bac:	f0 01       	movw	r30, r0
 bae:	72 9f       	mul	r23, r18
 bb0:	bb 27       	eor	r27, r27
 bb2:	f0 0d       	add	r31, r0
 bb4:	b1 1d       	adc	r27, r1
 bb6:	63 9f       	mul	r22, r19
 bb8:	aa 27       	eor	r26, r26
 bba:	f0 0d       	add	r31, r0
 bbc:	b1 1d       	adc	r27, r1
 bbe:	aa 1f       	adc	r26, r26
 bc0:	64 9f       	mul	r22, r20
 bc2:	66 27       	eor	r22, r22
 bc4:	b0 0d       	add	r27, r0
 bc6:	a1 1d       	adc	r26, r1
 bc8:	66 1f       	adc	r22, r22
 bca:	82 9f       	mul	r24, r18
 bcc:	22 27       	eor	r18, r18
 bce:	b0 0d       	add	r27, r0
 bd0:	a1 1d       	adc	r26, r1
 bd2:	62 1f       	adc	r22, r18
 bd4:	73 9f       	mul	r23, r19
 bd6:	b0 0d       	add	r27, r0
 bd8:	a1 1d       	adc	r26, r1
 bda:	62 1f       	adc	r22, r18
 bdc:	83 9f       	mul	r24, r19
 bde:	a0 0d       	add	r26, r0
 be0:	61 1d       	adc	r22, r1
 be2:	22 1f       	adc	r18, r18
 be4:	74 9f       	mul	r23, r20
 be6:	33 27       	eor	r19, r19
 be8:	a0 0d       	add	r26, r0
 bea:	61 1d       	adc	r22, r1
 bec:	23 1f       	adc	r18, r19
 bee:	84 9f       	mul	r24, r20
 bf0:	60 0d       	add	r22, r0
 bf2:	21 1d       	adc	r18, r1
 bf4:	82 2f       	mov	r24, r18
 bf6:	76 2f       	mov	r23, r22
 bf8:	6a 2f       	mov	r22, r26
 bfa:	11 24       	eor	r1, r1
 bfc:	9f 57       	subi	r25, 0x7F	; 127
 bfe:	50 40       	sbci	r21, 0x00	; 0
 c00:	9a f0       	brmi	.+38     	; 0xc28 <__mulsf3_pse+0x88>
 c02:	f1 f0       	breq	.+60     	; 0xc40 <__mulsf3_pse+0xa0>
 c04:	88 23       	and	r24, r24
 c06:	4a f0       	brmi	.+18     	; 0xc1a <__mulsf3_pse+0x7a>
 c08:	ee 0f       	add	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	bb 1f       	adc	r27, r27
 c0e:	66 1f       	adc	r22, r22
 c10:	77 1f       	adc	r23, r23
 c12:	88 1f       	adc	r24, r24
 c14:	91 50       	subi	r25, 0x01	; 1
 c16:	50 40       	sbci	r21, 0x00	; 0
 c18:	a9 f7       	brne	.-22     	; 0xc04 <__mulsf3_pse+0x64>
 c1a:	9e 3f       	cpi	r25, 0xFE	; 254
 c1c:	51 05       	cpc	r21, r1
 c1e:	80 f0       	brcs	.+32     	; 0xc40 <__mulsf3_pse+0xa0>
 c20:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__fp_inf>
 c24:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_szero>
 c28:	5f 3f       	cpi	r21, 0xFF	; 255
 c2a:	e4 f3       	brlt	.-8      	; 0xc24 <__mulsf3_pse+0x84>
 c2c:	98 3e       	cpi	r25, 0xE8	; 232
 c2e:	d4 f3       	brlt	.-12     	; 0xc24 <__mulsf3_pse+0x84>
 c30:	86 95       	lsr	r24
 c32:	77 95       	ror	r23
 c34:	67 95       	ror	r22
 c36:	b7 95       	ror	r27
 c38:	f7 95       	ror	r31
 c3a:	e7 95       	ror	r30
 c3c:	9f 5f       	subi	r25, 0xFF	; 255
 c3e:	c1 f7       	brne	.-16     	; 0xc30 <__mulsf3_pse+0x90>
 c40:	fe 2b       	or	r31, r30
 c42:	88 0f       	add	r24, r24
 c44:	91 1d       	adc	r25, r1
 c46:	96 95       	lsr	r25
 c48:	87 95       	ror	r24
 c4a:	97 f9       	bld	r25, 7
 c4c:	08 95       	ret

00000c4e <_exit>:
 c4e:	f8 94       	cli

00000c50 <__stop_program>:
 c50:	ff cf       	rjmp	.-2      	; 0xc50 <__stop_program>
