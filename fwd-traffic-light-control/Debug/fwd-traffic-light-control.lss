
fwd-traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000c54  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000cea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001526  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf5  00000000  00000000  00002dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e2  00000000  00000000  00003d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1f  00000000  00000000  0000435a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <normalMode>:
uint8_t wasRedLedOn = 0;
uint8_t buttonPressed = 0;

void normalMode() {
	// For pedestrians, turn on red
	LED_on_only(LED_PEDESTRIANS_PORT, LED_RED_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_on_only>

	// For cars, turn on green at first
	LED_on_only(LED_CARS_PORT, LED_GREEN_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_on_only>
	TIMER_delay_5s();
  a2:	0e 94 ae 03 	call	0x75c	; 0x75c <TIMER_delay_5s>
	wasRedLedOn = 0;
  a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  ae:	81 11       	cpse	r24, r1
  b0:	19 c0       	rjmp	.+50     	; 0xe4 <normalMode+0x52>

	// Then, turn off green => blink yellow
	LED_off(LED_CARS_PORT, LED_GREEN_PIN);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_blink(LED_CARS_PORT, LED_YELLOW_PIN);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 12 01 	call	0x224	; 0x224 <LED_blink>
	wasRedLedOn = 0;
  c0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	if(buttonPressed) return;
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  c8:	81 11       	cpse	r24, r1
  ca:	0c c0       	rjmp	.+24     	; 0xe4 <normalMode+0x52>

	// Lastly, turn off yellow => turn on red
	LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_on(LED_CARS_PORT, LED_RED_PIN);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	TIMER_delay_5s();
  da:	0e 94 ae 03 	call	0x75c	; 0x75c <TIMER_delay_5s>
	wasRedLedOn = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <wasRedLedOn>
  e4:	08 95       	ret

000000e6 <pedestrianMode>:
	if(buttonPressed) return;
}

void pedestrianMode() {
	if(wasRedLedOn) {
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <wasRedLedOn>
  ea:	88 23       	and	r24, r24
  ec:	49 f0       	breq	.+18     	; 0x100 <pedestrianMode+0x1a>
		// For cars, turn on red
		LED_on_only(LED_CARS_PORT, LED_RED_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_on_only>

		// For pedestrians, turn on green
		LED_on_only(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LED_on_only>
  fe:	26 c0       	rjmp	.+76     	; 0x14c <pedestrianMode+0x66>
	} else {
		// For cars and pedestrians, blink both yellow
		LED_off(LED_CARS_PORT, LED_RED_PIN);
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_CARS_PORT, LED_GREEN_PIN);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_RED_PIN);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 3b 01 	call	0x276	; 0x276 <LED_double_blink>
		
		// The, turn off both yellow => turn on cars red led and pedestrians green led
		LED_off(LED_CARS_PORT, LED_YELLOW_PIN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_off(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
		LED_on(LED_CARS_PORT, LED_RED_PIN);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
		LED_on(LED_PEDESTRIANS_PORT, LED_GREEN_PIN);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
	}
	
	TIMER_delay_5s();
 14c:	0e 94 ae 03 	call	0x75c	; 0x75c <TIMER_delay_5s>
	
	// Turn off cars red => Blink both yellow
	LED_off(LED_CARS_PORT, LED_RED_PIN);
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
	LED_double_blink(LED_CARS_PORT, LED_YELLOW_PIN, LED_PEDESTRIANS_PORT, LED_YELLOW_PIN);
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 3b 01 	call	0x276	; 0x276 <LED_double_blink>
	
	isNormalMode = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	wasRedLedOn = 0;
 16a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <wasRedLedOn>
	buttonPressed = 0;
 16e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 172:	08 95       	ret

00000174 <APP_init>:
}

void APP_init() {
	LEDS_init();
 174:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LEDS_init>
	BUTTON_init();
 178:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <BUTTON_init>
	TIMER_init();
 17c:	0e 94 0d 03 	call	0x61a	; 0x61a <TIMER_init>
 180:	08 95       	ret

00000182 <APP_start>:
}

void APP_start() {
	if(isNormalMode) {
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	88 23       	and	r24, r24
 188:	19 f0       	breq	.+6      	; 0x190 <APP_start+0xe>
		normalMode();
 18a:	0e 94 49 00 	call	0x92	; 0x92 <normalMode>
 18e:	08 95       	ret
	} else {
		pedestrianMode();
 190:	0e 94 73 00 	call	0xe6	; 0xe6 <pedestrianMode>
 194:	08 95       	ret

00000196 <__vector_1>:
	}
}

ISR(EXT_INT_0) {
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
	if(!buttonPressed) {
 1a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1a6:	81 11       	cpse	r24, r1
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_1+0x1e>
		isNormalMode = 0;
 1aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		buttonPressed = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
}
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <BUTTON_init>:
 */ 

#include "button.h"

void BUTTON_init() {
	DIO_init(BUTTON_PORT, BUTTON_PIN, IN);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
	INTERRUPTS_init();
 1ca:	0e 94 05 03 	call	0x60a	; 0x60a <INTERRUPTS_init>
 1ce:	08 95       	ret

000001d0 <LEDS_init>:
 */ 

#include "led.h"

void LEDS_init() {
	DIO_init(LED_CARS_PORT, LED_RED_PIN, OUT);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
	DIO_init(LED_CARS_PORT, LED_YELLOW_PIN, OUT);
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
	DIO_init(LED_CARS_PORT, LED_GREEN_PIN, OUT);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>

	DIO_init(LED_PEDESTRIANS_PORT, LED_RED_PIN, OUT);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_YELLOW_PIN, OUT);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
	DIO_init(LED_PEDESTRIANS_PORT, LED_GREEN_PIN, OUT);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_init>
 20c:	08 95       	ret

0000020e <LED_on>:
}

EN_error_state LED_on(EN_port_t port, EN_pin_t pin) {
	return DIO_write(port, pin, HIGH);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	0e 94 41 02 	call	0x482	; 0x482 <DIO_write>
}
 214:	08 95       	ret

00000216 <LED_off>:

EN_error_state LED_off(EN_port_t port, EN_pin_t pin) {
	return DIO_write(port, pin, LOW);
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	0e 94 41 02 	call	0x482	; 0x482 <DIO_write>
}
 21c:	08 95       	ret

0000021e <LED_toggle>:

EN_error_state LED_toggle(EN_port_t port, EN_pin_t pin) {
	return DIO_toggle(port, pin);
 21e:	0e 94 cb 02 	call	0x596	; 0x596 <DIO_toggle>
}
 222:	08 95       	ret

00000224 <LED_blink>:

EN_error_state LED_blink(EN_port_t port, EN_pin_t pin) {
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	08 2f       	mov	r16, r24
 230:	f6 2e       	mov	r15, r22
	EN_error_state errorState = LED_on(port, pin);
 232:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
 236:	18 2f       	mov	r17, r24
	
	if(errorState != ERR) {
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	89 f4       	brne	.+34     	; 0x25e <LED_blink+0x3a>
 23c:	15 c0       	rjmp	.+42     	; 0x268 <LED_blink+0x44>
		for(int i = 0; i < 5; i++) {
			errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
 23e:	0e 94 b7 03 	call	0x76e	; 0x76e <TIMER_delay_1s>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	09 f4       	brne	.+2      	; 0x248 <LED_blink+0x24>
 246:	11 e0       	ldi	r17, 0x01	; 1
			errorState = ACCUMULATE_ERROR(LED_toggle(port, pin), errorState);
 248:	6f 2d       	mov	r22, r15
 24a:	80 2f       	mov	r24, r16
 24c:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	09 f4       	brne	.+2      	; 0x256 <LED_blink+0x32>
 254:	11 e0       	ldi	r17, 0x01	; 1
			if(errorState == ERR) break;
 256:	11 30       	cpi	r17, 0x01	; 1
 258:	39 f0       	breq	.+14     	; 0x268 <LED_blink+0x44>

EN_error_state LED_blink(EN_port_t port, EN_pin_t pin) {
	EN_error_state errorState = LED_on(port, pin);
	
	if(errorState != ERR) {
		for(int i = 0; i < 5; i++) {
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	02 c0       	rjmp	.+4      	; 0x262 <LED_blink+0x3e>
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	c5 30       	cpi	r28, 0x05	; 5
 264:	d1 05       	cpc	r29, r1
 266:	5c f3       	brlt	.-42     	; 0x23e <LED_blink+0x1a>
			if(errorState == ERR) break;
		}
	}
	
	return errorState;
}
 268:	81 2f       	mov	r24, r17
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	08 95       	ret

00000276 <LED_double_blink>:

EN_error_state LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	08 2f       	mov	r16, r24
 286:	f6 2e       	mov	r15, r22
 288:	e4 2e       	mov	r14, r20
 28a:	d2 2e       	mov	r13, r18
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
 28c:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	11 f0       	breq	.+4      	; 0x298 <LED_double_blink+0x22>
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	01 c0       	rjmp	.+2      	; 0x29a <LED_double_blink+0x24>
 298:	11 e0       	ldi	r17, 0x01	; 1
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
 29a:	6d 2d       	mov	r22, r13
 29c:	8e 2d       	mov	r24, r14
 29e:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <LED_double_blink+0x32>
 2a6:	11 e0       	ldi	r17, 0x01	; 1
	for(int i = 0; i < 5; i++) {
		errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
		errorState = ACCUMULATE_ERROR(LED_toggle(port1, pin1), errorState);
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	16 c0       	rjmp	.+44     	; 0x2da <LED_double_blink+0x64>
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
	for(int i = 0; i < 5; i++) {
		errorState = ACCUMULATE_ERROR(TIMER_delay_1s(), errorState);
 2ae:	0e 94 b7 03 	call	0x76e	; 0x76e <TIMER_delay_1s>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <LED_double_blink+0x42>
 2b6:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_toggle(port1, pin1), errorState);
 2b8:	6f 2d       	mov	r22, r15
 2ba:	80 2f       	mov	r24, r16
 2bc:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <LED_double_blink+0x50>
 2c4:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
 2c6:	6d 2d       	mov	r22, r13
 2c8:	8e 2d       	mov	r24, r14
 2ca:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_toggle>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <LED_double_blink+0x5e>
 2d2:	11 e0       	ldi	r17, 0x01	; 1
		if(errorState == ERR) break;
 2d4:	11 30       	cpi	r17, 0x01	; 1
 2d6:	21 f0       	breq	.+8      	; 0x2e0 <LED_double_blink+0x6a>
EN_error_state LED_double_blink(EN_port_t port1, EN_pin_t pin1, EN_port_t port2, EN_pin_t pin2) {
	EN_error_state errorState = OK;

	errorState = ACCUMULATE_ERROR(LED_on(port1, pin1), errorState);
	errorState = ACCUMULATE_ERROR(LED_on(port2, pin2), errorState);
	for(int i = 0; i < 5; i++) {
 2d8:	21 96       	adiw	r28, 0x01	; 1
 2da:	c5 30       	cpi	r28, 0x05	; 5
 2dc:	d1 05       	cpc	r29, r1
 2de:	3c f3       	brlt	.-50     	; 0x2ae <LED_double_blink+0x38>
		errorState = ACCUMULATE_ERROR(LED_toggle(port2, pin2), errorState);
		if(errorState == ERR) break;
	}
	
	return errorState;
}
 2e0:	81 2f       	mov	r24, r17
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	08 95       	ret

000002f2 <LED_on_only>:

EN_error_state LED_on_only(EN_port_t port, EN_pin_t pin) {
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	d8 2f       	mov	r29, r24
 2fa:	c6 2f       	mov	r28, r22
	EN_error_state errorState = LED_on(port, pin);
 2fc:	0e 94 07 01 	call	0x20e	; 0x20e <LED_on>
 300:	18 2f       	mov	r17, r24

	if(pin == LED_RED_PIN) {
 302:	c2 30       	cpi	r28, 0x02	; 2
 304:	79 f4       	brne	.+30     	; 0x324 <LED_on_only+0x32>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_GREEN_PIN), errorState);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8d 2f       	mov	r24, r29
 30a:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f4       	brne	.+2      	; 0x314 <LED_on_only+0x22>
 312:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_YELLOW_PIN), errorState);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8d 2f       	mov	r24, r29
 318:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	19 f5       	brne	.+70     	; 0x366 <LED_on_only+0x74>
 320:	11 e0       	ldi	r17, 0x01	; 1
 322:	21 c0       	rjmp	.+66     	; 0x366 <LED_on_only+0x74>
	} else if(pin == LED_GREEN_PIN) {
 324:	c1 11       	cpse	r28, r1
 326:	0f c0       	rjmp	.+30     	; 0x346 <LED_on_only+0x54>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_RED_PIN), errorState);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	8d 2f       	mov	r24, r29
 32c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	09 f4       	brne	.+2      	; 0x336 <LED_on_only+0x44>
 334:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_YELLOW_PIN), errorState);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8d 2f       	mov	r24, r29
 33a:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	91 f4       	brne	.+36     	; 0x366 <LED_on_only+0x74>
 342:	11 e0       	ldi	r17, 0x01	; 1
 344:	10 c0       	rjmp	.+32     	; 0x366 <LED_on_only+0x74>
	} else if(pin == LED_YELLOW_PIN) {
 346:	c1 30       	cpi	r28, 0x01	; 1
 348:	71 f4       	brne	.+28     	; 0x366 <LED_on_only+0x74>
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_RED_PIN), errorState);
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	8d 2f       	mov	r24, r29
 34e:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	09 f4       	brne	.+2      	; 0x358 <LED_on_only+0x66>
 356:	11 e0       	ldi	r17, 0x01	; 1
		errorState = ACCUMULATE_ERROR(LED_off(port, LED_GREEN_PIN), errorState);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	8d 2f       	mov	r24, r29
 35c:	0e 94 0b 01 	call	0x216	; 0x216 <LED_off>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	09 f4       	brne	.+2      	; 0x366 <LED_on_only+0x74>
 364:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	return errorState;
 366:	81 2f       	mov	r24, r17
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	08 95       	ret

00000370 <main>:

#include "./Application/app.h"

int main(void)
{
	APP_init();
 370:	0e 94 ba 00 	call	0x174	; 0x174 <APP_init>
	
	while(1) {
		APP_start();
 374:	0e 94 c1 00 	call	0x182	; 0x182 <APP_start>
 378:	fd cf       	rjmp	.-6      	; 0x374 <main+0x4>

0000037a <DIO_init>:
#include "dio.h"

EN_error_state DIO_init(EN_port_t port, EN_pin_t pin, EN_direction_t direction) {
	// Set the direction of the given pin
	
	switch (port) {
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	11 f1       	breq	.+68     	; 0x3c2 <DIO_init+0x48>
 37e:	30 f0       	brcs	.+12     	; 0x38c <DIO_init+0x12>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	e9 f1       	breq	.+122    	; 0x3fe <DIO_init+0x84>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f4       	brne	.+2      	; 0x38a <DIO_init+0x10>
 388:	57 c0       	rjmp	.+174    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 38a:	73 c0       	rjmp	.+230    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
 38c:	41 11       	cpse	r20, r1
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <DIO_init+0x30>
 390:	2a b3       	in	r18, 0x1a	; 26
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_init+0x22>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_init+0x1e>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
	// Set the direction of the given pin
	
	switch (port) {
		case PORT_A:
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
 3aa:	2a b3       	in	r18, 0x1a	; 26
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0x3c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0x38>
 3ba:	82 2b       	or	r24, r18
 3bc:	8a bb       	out	0x1a, r24	; 26
			break;
		default:
			return ERR;
	}
	
	return OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRA, pin); 
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
 3c2:	41 11       	cpse	r20, r1
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <DIO_init+0x66>
 3c6:	27 b3       	in	r18, 0x17	; 23
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0x58>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x54>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
			else SET_BIT(DDRA, pin); 
			
			break;
		case PORT_B:
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <DIO_init+0x6c>
 3e4:	48 c0       	rjmp	.+144    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3e6:	27 b3       	in	r18, 0x17	; 23
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_init+0x78>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_init+0x74>
 3f6:	82 2b       	or	r24, r18
 3f8:	87 bb       	out	0x17, r24	; 23
			break;
		default:
			return ERR;
	}
	
	return OK;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRB, pin);
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
 3fe:	41 11       	cpse	r20, r1
 400:	0d c0       	rjmp	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 402:	24 b3       	in	r18, 0x14	; 20
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 95       	com	r24
 414:	82 23       	and	r24, r18
 416:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRB, pin);
			
			break;
		case PORT_C:
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	69 f5       	brne	.+90     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 420:	24 b3       	in	r18, 0x14	; 20
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	82 2b       	or	r24, r18
 432:	84 bb       	out	0x14, r24	; 20
			break;
		default:
			return ERR;
	}
	
	return OK;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRC, pin);
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
 438:	41 11       	cpse	r20, r1
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 43c:	21 b3       	in	r18, 0x11	; 17
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
			else if (direction == OUT) SET_BIT(DDRC, pin);

			break;
		case PORT_D:
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	91 f4       	brne	.+36     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 45a:	21 b3       	in	r18, 0x11	; 17
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	82 2b       	or	r24, r18
 46c:	81 bb       	out	0x11, r24	; 17
			break;
		default:
			return ERR;
	}
	
	return OK;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
			if (direction == IN) CLR_BIT(DDRD, pin); 
			else if (direction == OUT) SET_BIT(DDRD, pin);

			break;
		default:
			return ERR;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret
	}
	
	return OK;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	80 e0       	ldi	r24, 0x00	; 0
}
 480:	08 95       	ret

00000482 <DIO_write>:

EN_error_state DIO_write(EN_port_t port, EN_pin_t pin, uint8_t value) {
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	31 f1       	breq	.+76     	; 0x4d2 <DIO_write+0x50>
 486:	38 f0       	brcs	.+14     	; 0x496 <DIO_write+0x14>
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	09 f4       	brne	.+2      	; 0x48e <DIO_write+0xc>
 48c:	40 c0       	rjmp	.+128    	; 0x50e <DIO_write+0x8c>
 48e:	83 30       	cpi	r24, 0x03	; 3
 490:	09 f4       	brne	.+2      	; 0x494 <DIO_write+0x12>
 492:	5a c0       	rjmp	.+180    	; 0x548 <DIO_write+0xc6>
 494:	76 c0       	rjmp	.+236    	; 0x582 <DIO_write+0x100>
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
 496:	41 11       	cpse	r20, r1
 498:	0d c0       	rjmp	.+26     	; 0x4b4 <DIO_write+0x32>
 49a:	2b b3       	in	r18, 0x1b	; 27
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_write+0x24>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_write+0x20>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
	// Write HIGHT or LOW on the given pin
	
	switch (port) {
		case PORT_A:
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);
 4b4:	41 30       	cpi	r20, 0x01	; 1
 4b6:	09 f0       	breq	.+2      	; 0x4ba <DIO_write+0x38>
 4b8:	66 c0       	rjmp	.+204    	; 0x586 <DIO_write+0x104>
 4ba:	2b b3       	in	r18, 0x1b	; 27
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_write+0x44>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_write+0x40>
 4ca:	82 2b       	or	r24, r18
 4cc:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTA, pin);
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
 4d2:	41 11       	cpse	r20, r1
 4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <DIO_write+0x6e>
 4d6:	28 b3       	in	r18, 0x18	; 24
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_write+0x60>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_write+0x5c>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTA, pin);

			break;
		case PORT_B:
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);
 4f0:	41 30       	cpi	r20, 0x01	; 1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <DIO_write+0x74>
 4f4:	4a c0       	rjmp	.+148    	; 0x58a <DIO_write+0x108>
 4f6:	28 b3       	in	r18, 0x18	; 24
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_write+0x80>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_write+0x7c>
 506:	82 2b       	or	r24, r18
 508:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTB, pin);
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
 50e:	41 11       	cpse	r20, r1
 510:	0d c0       	rjmp	.+26     	; 0x52c <DIO_write+0xaa>
 512:	25 b3       	in	r18, 0x15	; 21
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_write+0x9c>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_write+0x98>
 522:	80 95       	com	r24
 524:	82 23       	and	r24, r18
 526:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTB, pin);

			break;
		case PORT_C:
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);
 52c:	41 30       	cpi	r20, 0x01	; 1
 52e:	79 f5       	brne	.+94     	; 0x58e <DIO_write+0x10c>
 530:	25 b3       	in	r18, 0x15	; 21
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0xba>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0xb6>
 540:	82 2b       	or	r24, r18
 542:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
			if (value == LOW)  CLR_BIT(PORTC, pin);
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
 548:	41 11       	cpse	r20, r1
 54a:	0d c0       	rjmp	.+26     	; 0x566 <DIO_write+0xe4>
 54c:	22 b3       	in	r18, 0x12	; 18
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_write+0xd6>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_write+0xd2>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
			else if (value == HIGH) SET_BIT(PORTC, pin);

			break;
		case PORT_D:
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
 566:	41 30       	cpi	r20, 0x01	; 1
 568:	a1 f4       	brne	.+40     	; 0x592 <DIO_write+0x110>
 56a:	22 b3       	in	r18, 0x12	; 18
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_write+0xf4>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_write+0xf0>
 57a:	82 2b       	or	r24, r18
 57c:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
			if (value == LOW) CLR_BIT(PORTD, pin);
			else if (value == HIGH) SET_BIT(PORTD, pin);
			
			break;
		default:
			return ERR;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	08 95       	ret
	}
	
	return OK;
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	08 95       	ret
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	08 95       	ret
 592:	80 e0       	ldi	r24, 0x00	; 0
}
 594:	08 95       	ret

00000596 <DIO_toggle>:

EN_error_state DIO_toggle(EN_port_t port, EN_pin_t pin) {
	// Toggle the state of the given pin

	switch (port) {
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	91 f0       	breq	.+36     	; 0x5be <DIO_toggle+0x28>
 59a:	28 f0       	brcs	.+10     	; 0x5a6 <DIO_toggle+0x10>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	d9 f0       	breq	.+54     	; 0x5d6 <DIO_toggle+0x40>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	29 f1       	breq	.+74     	; 0x5ee <DIO_toggle+0x58>
 5a4:	30 c0       	rjmp	.+96     	; 0x606 <DIO_toggle+0x70>
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
 5a6:	2b b3       	in	r18, 0x1b	; 27
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_toggle+0x1c>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_toggle+0x18>
 5b6:	82 27       	eor	r24, r18
 5b8:	8b bb       	out	0x1b, r24	; 27
			break;
		default:
			return ERR;
	}
	
	return OK;
 5ba:	80 e0       	ldi	r24, 0x00	; 0
	// Toggle the state of the given pin

	switch (port) {
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
 5bc:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_toggle+0x34>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_toggle+0x30>
 5ce:	82 27       	eor	r24, r18
 5d0:	88 bb       	out	0x18, r24	; 24
			break;
		default:
			return ERR;
	}
	
	return OK;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			TOGGLE_BIT(PORTA, pin);
			break;
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
 5d4:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
 5d6:	25 b3       	in	r18, 0x15	; 21
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_toggle+0x4c>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_toggle+0x48>
 5e6:	82 27       	eor	r24, r18
 5e8:	85 bb       	out	0x15, r24	; 21
			break;
		default:
			return ERR;
	}
	
	return OK;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			TOGGLE_BIT(PORTB, pin);
			break;
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
 5ec:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
 5ee:	22 b3       	in	r18, 0x12	; 18
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_toggle+0x64>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_toggle+0x60>
 5fe:	82 27       	eor	r24, r18
 600:	82 bb       	out	0x12, r24	; 18
			break;
		default:
			return ERR;
	}
	
	return OK;
 602:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			TOGGLE_BIT(PORTC, pin);
			break;
		case PORT_D:
			TOGGLE_BIT(PORTD, pin);
			break;
 604:	08 95       	ret
		default:
			return ERR;
 606:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return OK;
}
 608:	08 95       	ret

0000060a <INTERRUPTS_init>:

#include "interrupts.h"

void INTERRUPTS_init() {
	// Enable global interrupt
	sei();
 60a:	78 94       	sei
	
	// Set INT0 sense to rising edge
	MCUCR |= (1 << 0) | (1 << 1);
 60c:	85 b7       	in	r24, 0x35	; 53
 60e:	83 60       	ori	r24, 0x03	; 3
 610:	85 bf       	out	0x35, r24	; 53
	
	// Enable INT0
	SET_BIT(GICR, 6);
 612:	8b b7       	in	r24, 0x3b	; 59
 614:	80 64       	ori	r24, 0x40	; 64
 616:	8b bf       	out	0x3b, r24	; 59
 618:	08 95       	ret

0000061a <TIMER_init>:
#include "timer.h"
#include <math.h>

void TIMER_init() {
	// Set timer mode to normal
	TCCR0 = 0X00;
 61a:	13 be       	out	0x33, r1	; 51
	
	// Set timer initial value to 0
	TCNT0 = 0x00;
 61c:	12 be       	out	0x32, r1	; 50
 61e:	08 95       	ret

00000620 <TIMER_start>:
}

EN_error_state TIMER_start(uint16_t prescaler, uint8_t initialValue)
{
	// Set initial value
	TCNT0 = initialValue;
 620:	62 bf       	out	0x32, r22	; 50
	
	// Set prescaler, after which the timer starts
	switch (prescaler) {
 622:	80 34       	cpi	r24, 0x40	; 64
 624:	91 05       	cpc	r25, r1
 626:	c9 f0       	breq	.+50     	; 0x65a <TIMER_start+0x3a>
 628:	30 f4       	brcc	.+12     	; 0x636 <TIMER_start+0x16>
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	91 05       	cpc	r25, r1
 62e:	59 f0       	breq	.+22     	; 0x646 <TIMER_start+0x26>
 630:	08 97       	sbiw	r24, 0x08	; 8
 632:	71 f0       	breq	.+28     	; 0x650 <TIMER_start+0x30>
 634:	21 c0       	rjmp	.+66     	; 0x678 <TIMER_start+0x58>
 636:	81 15       	cp	r24, r1
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	92 07       	cpc	r25, r18
 63c:	99 f0       	breq	.+38     	; 0x664 <TIMER_start+0x44>
 63e:	81 15       	cp	r24, r1
 640:	94 40       	sbci	r25, 0x04	; 4
 642:	a9 f0       	breq	.+42     	; 0x66e <TIMER_start+0x4e>
 644:	19 c0       	rjmp	.+50     	; 0x678 <TIMER_start+0x58>
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
 646:	83 b7       	in	r24, 0x33	; 51
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 64c:	80 e0       	ldi	r24, 0x00	; 0
	// Set prescaler, after which the timer starts
	switch (prescaler) {
		case 1:
			// Set pin0
			SET_BIT(TCCR0, 0);
			break;
 64e:	08 95       	ret
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
 650:	83 b7       	in	r24, 0x33	; 51
 652:	82 60       	ori	r24, 0x02	; 2
 654:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 656:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 0);
			break;
		case 8:
			// Set pin1
			SET_BIT(TCCR0, 1);
			break;
 658:	08 95       	ret
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	83 60       	ori	r24, 0x03	; 3
 65e:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 660:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 1);
			break;
		case 64:
			// set pin0 and pin1
			TCCR0 |= 3;
			break;
 662:	08 95       	ret
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
 664:	83 b7       	in	r24, 0x33	; 51
 666:	84 60       	ori	r24, 0x04	; 4
 668:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 66a:	80 e0       	ldi	r24, 0x00	; 0
			TCCR0 |= 3;
			break;
		case 256:
			// Set pin2
			SET_BIT(TCCR0, 2);
			break;
 66c:	08 95       	ret
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	85 60       	ori	r24, 0x05	; 5
 672:	83 bf       	out	0x33, r24	; 51
		default:
			return ERR;
			break;
	}
	
	return OK;
 674:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(TCCR0, 2);
			break;
		case 1024:
			// Set pin0 and pin2
			TCCR0 |= 5;
			break;
 676:	08 95       	ret
		default:
			return ERR;
 678:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	
	return OK;
	
}
 67a:	08 95       	ret

0000067c <TIMER_stop>:

void TIMER_stop()
{
	// Set prescaler to zero
	TCCR0 = 0x00;
 67c:	13 be       	out	0x33, r1	; 51
 67e:	08 95       	ret

00000680 <TIMER_delay>:
}

EN_error_state TIMER_delay(float delay_in_ms, uint16_t prescaler)
{		
 680:	8f 92       	push	r8
 682:	9f 92       	push	r9
 684:	af 92       	push	r10
 686:	bf 92       	push	r11
 688:	cf 92       	push	r12
 68a:	df 92       	push	r13
 68c:	ef 92       	push	r14
 68e:	ff 92       	push	r15
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
 69c:	8a 01       	movw	r16, r20
	// Timer calculations
	double clk_freq = 1000000; // 10^6
	int timer_max_count = 256; // 8^2

	double tick = ((double) prescaler / clk_freq) * 1000;
 69e:	ba 01       	movw	r22, r20
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__floatunsisf>
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	34 e2       	ldi	r19, 0x24	; 36
 6ac:	44 e7       	ldi	r20, 0x74	; 116
 6ae:	59 e4       	ldi	r21, 0x49	; 73
 6b0:	0e 94 44 04 	call	0x888	; 0x888 <__divsf3>
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	4a e7       	ldi	r20, 0x7A	; 122
 6ba:	54 e4       	ldi	r21, 0x44	; 68
 6bc:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
 6c0:	4b 01       	movw	r8, r22
 6c2:	5c 01       	movw	r10, r24
	double max_delay = tick * timer_max_count;
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	40 e8       	ldi	r20, 0x80	; 128
 6ca:	53 e4       	ldi	r21, 0x43	; 67
 6cc:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
 6d0:	9b 01       	movw	r18, r22
 6d2:	ac 01       	movw	r20, r24
	int num_overflows = (int) ceil(delay_in_ms / max_delay);
 6d4:	c7 01       	movw	r24, r14
 6d6:	b6 01       	movw	r22, r12
 6d8:	0e 94 44 04 	call	0x888	; 0x888 <__divsf3>
 6dc:	0e 94 2d 04 	call	0x85a	; 0x85a <ceil>
 6e0:	0e 94 b6 04 	call	0x96c	; 0x96c <__fixsfsi>
 6e4:	eb 01       	movw	r28, r22
	int initial_value = (int)(timer_max_count - (delay_in_ms / tick) / 2);
 6e6:	a5 01       	movw	r20, r10
 6e8:	94 01       	movw	r18, r8
 6ea:	c7 01       	movw	r24, r14
 6ec:	b6 01       	movw	r22, r12
 6ee:	0e 94 44 04 	call	0x888	; 0x888 <__divsf3>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	5f e3       	ldi	r21, 0x3F	; 63
 6fa:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3>
 6fe:	9b 01       	movw	r18, r22
 700:	ac 01       	movw	r20, r24
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	93 e4       	ldi	r25, 0x43	; 67
 70a:	0e 94 c0 03 	call	0x780	; 0x780 <__subsf3>
 70e:	0e 94 b6 04 	call	0x96c	; 0x96c <__fixsfsi>
	
	// Start timer and count overflows until given delay
	EN_error_state errorState = TIMER_start(prescaler, initial_value);
 712:	c8 01       	movw	r24, r16
 714:	0e 94 10 03 	call	0x620	; 0x620 <TIMER_start>
 718:	18 2f       	mov	r17, r24
	
	if(errorState == OK) {
 71a:	88 23       	and	r24, r24
 71c:	51 f0       	breq	.+20     	; 0x732 <TIMER_delay+0xb2>
 71e:	10 c0       	rjmp	.+32     	; 0x740 <TIMER_delay+0xc0>
		uint32_t overflow_counter = 0;
		while (overflow_counter < num_overflows)
		{
			// Wait for the overflow flag to be set
			while ((TIFR & (1 << 0)) == 0) {}
 720:	08 b6       	in	r0, 0x38	; 56
 722:	00 fe       	sbrs	r0, 0
 724:	fd cf       	rjmp	.-6      	; 0x720 <TIMER_delay+0xa0>
			
			// Clear the overflow flag
			TIFR |= (1 << 0);
 726:	88 b7       	in	r24, 0x38	; 56
 728:	81 60       	ori	r24, 0x01	; 1
 72a:	88 bf       	out	0x38, r24	; 56
		
			overflow_counter++;
 72c:	2f 5f       	subi	r18, 0xFF	; 255
 72e:	3f 4f       	sbci	r19, 0xFF	; 255
 730:	02 c0       	rjmp	.+4      	; 0x736 <TIMER_delay+0xb6>
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
	// Start timer and count overflows until given delay
	EN_error_state errorState = TIMER_start(prescaler, initial_value);
	
	if(errorState == OK) {
		uint32_t overflow_counter = 0;
		while (overflow_counter < num_overflows)
 736:	2c 17       	cp	r18, r28
 738:	3d 07       	cpc	r19, r29
 73a:	90 f3       	brcs	.-28     	; 0x720 <TIMER_delay+0xa0>
			TIFR |= (1 << 0);
		
			overflow_counter++;
		}
	
		TIMER_stop();
 73c:	0e 94 3e 03 	call	0x67c	; 0x67c <TIMER_stop>
	}
	
	return errorState;
}
 740:	81 2f       	mov	r24, r17
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	bf 90       	pop	r11
 754:	af 90       	pop	r10
 756:	9f 90       	pop	r9
 758:	8f 90       	pop	r8
 75a:	08 95       	ret

0000075c <TIMER_delay_5s>:

EN_error_state TIMER_delay_5s() {
	return TIMER_delay(5000, 1024);
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	54 e0       	ldi	r21, 0x04	; 4
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	70 e4       	ldi	r23, 0x40	; 64
 764:	8c e9       	ldi	r24, 0x9C	; 156
 766:	95 e4       	ldi	r25, 0x45	; 69
 768:	0e 94 40 03 	call	0x680	; 0x680 <TIMER_delay>
}
 76c:	08 95       	ret

0000076e <TIMER_delay_1s>:

EN_error_state TIMER_delay_1s() {
	return TIMER_delay(1000, 1024);
 76e:	40 e0       	ldi	r20, 0x00	; 0
 770:	54 e0       	ldi	r21, 0x04	; 4
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	8a e7       	ldi	r24, 0x7A	; 122
 778:	94 e4       	ldi	r25, 0x44	; 68
 77a:	0e 94 40 03 	call	0x680	; 0x680 <TIMER_delay>
}
 77e:	08 95       	ret

00000780 <__subsf3>:
 780:	50 58       	subi	r21, 0x80	; 128

00000782 <__addsf3>:
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__addsf3x>
 78a:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_round>
 78e:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_pscA>
 792:	38 f0       	brcs	.+14     	; 0x7a2 <__addsf3+0x20>
 794:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscB>
 798:	20 f0       	brcs	.+8      	; 0x7a2 <__addsf3+0x20>
 79a:	39 f4       	brne	.+14     	; 0x7aa <__addsf3+0x28>
 79c:	9f 3f       	cpi	r25, 0xFF	; 255
 79e:	19 f4       	brne	.+6      	; 0x7a6 <__addsf3+0x24>
 7a0:	26 f4       	brtc	.+8      	; 0x7aa <__addsf3+0x28>
 7a2:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_nan>
 7a6:	0e f4       	brtc	.+2      	; 0x7aa <__addsf3+0x28>
 7a8:	e0 95       	com	r30
 7aa:	e7 fb       	bst	r30, 7
 7ac:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_inf>

000007b0 <__addsf3x>:
 7b0:	e9 2f       	mov	r30, r25
 7b2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_split3>
 7b6:	58 f3       	brcs	.-42     	; 0x78e <__addsf3+0xc>
 7b8:	ba 17       	cp	r27, r26
 7ba:	62 07       	cpc	r22, r18
 7bc:	73 07       	cpc	r23, r19
 7be:	84 07       	cpc	r24, r20
 7c0:	95 07       	cpc	r25, r21
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3x+0x1c>
 7c4:	79 f4       	brne	.+30     	; 0x7e4 <__addsf3x+0x34>
 7c6:	a6 f5       	brtc	.+104    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7c8:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_zero>
 7cc:	0e f4       	brtc	.+2      	; 0x7d0 <__addsf3x+0x20>
 7ce:	e0 95       	com	r30
 7d0:	0b 2e       	mov	r0, r27
 7d2:	ba 2f       	mov	r27, r26
 7d4:	a0 2d       	mov	r26, r0
 7d6:	0b 01       	movw	r0, r22
 7d8:	b9 01       	movw	r22, r18
 7da:	90 01       	movw	r18, r0
 7dc:	0c 01       	movw	r0, r24
 7de:	ca 01       	movw	r24, r20
 7e0:	a0 01       	movw	r20, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	ff 27       	eor	r31, r31
 7e6:	59 1b       	sub	r21, r25
 7e8:	99 f0       	breq	.+38     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ea:	59 3f       	cpi	r21, 0xF9	; 249
 7ec:	50 f4       	brcc	.+20     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ee:	50 3e       	cpi	r21, 0xE0	; 224
 7f0:	68 f1       	brcs	.+90     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 7f2:	1a 16       	cp	r1, r26
 7f4:	f0 40       	sbci	r31, 0x00	; 0
 7f6:	a2 2f       	mov	r26, r18
 7f8:	23 2f       	mov	r18, r19
 7fa:	34 2f       	mov	r19, r20
 7fc:	44 27       	eor	r20, r20
 7fe:	58 5f       	subi	r21, 0xF8	; 248
 800:	f3 cf       	rjmp	.-26     	; 0x7e8 <__addsf3x+0x38>
 802:	46 95       	lsr	r20
 804:	37 95       	ror	r19
 806:	27 95       	ror	r18
 808:	a7 95       	ror	r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	53 95       	inc	r21
 80e:	c9 f7       	brne	.-14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 810:	7e f4       	brtc	.+30     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 812:	1f 16       	cp	r1, r31
 814:	ba 0b       	sbc	r27, r26
 816:	62 0b       	sbc	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	ba f0       	brmi	.+46     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	a1 f0       	breq	.+40     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 822:	ff 0f       	add	r31, r31
 824:	bb 1f       	adc	r27, r27
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	c2 f7       	brpl	.-16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 830:	ba 0f       	add	r27, r26
 832:	62 1f       	adc	r22, r18
 834:	73 1f       	adc	r23, r19
 836:	84 1f       	adc	r24, r20
 838:	48 f4       	brcc	.+18     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	9e 3f       	cpi	r25, 0xFE	; 254
 846:	08 f0       	brcs	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	b0 cf       	rjmp	.-160    	; 0x7aa <__addsf3+0x28>
 84a:	93 95       	inc	r25
 84c:	88 0f       	add	r24, r24
 84e:	08 f0       	brcs	.+2      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 850:	99 27       	eor	r25, r25
 852:	ee 0f       	add	r30, r30
 854:	97 95       	ror	r25
 856:	87 95       	ror	r24
 858:	08 95       	ret

0000085a <ceil>:
 85a:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_trunc>
 85e:	90 f0       	brcs	.+36     	; 0x884 <__stack+0x25>
 860:	9f 37       	cpi	r25, 0x7F	; 127
 862:	48 f4       	brcc	.+18     	; 0x876 <__stack+0x17>
 864:	91 11       	cpse	r25, r1
 866:	16 f4       	brtc	.+4      	; 0x86c <__stack+0xd>
 868:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	80 e8       	ldi	r24, 0x80	; 128
 872:	9f e3       	ldi	r25, 0x3F	; 63
 874:	08 95       	ret
 876:	26 f0       	brts	.+8      	; 0x880 <__stack+0x21>
 878:	1b 16       	cp	r1, r27
 87a:	61 1d       	adc	r22, r1
 87c:	71 1d       	adc	r23, r1
 87e:	81 1d       	adc	r24, r1
 880:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__fp_mintl>
 884:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_mpack>

00000888 <__divsf3>:
 888:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__divsf3x>
 88c:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_round>
 890:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscB>
 894:	58 f0       	brcs	.+22     	; 0x8ac <__divsf3+0x24>
 896:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_pscA>
 89a:	40 f0       	brcs	.+16     	; 0x8ac <__divsf3+0x24>
 89c:	29 f4       	brne	.+10     	; 0x8a8 <__divsf3+0x20>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	29 f0       	breq	.+10     	; 0x8ac <__divsf3+0x24>
 8a2:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_inf>
 8a6:	51 11       	cpse	r21, r1
 8a8:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>
 8ac:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_nan>

000008b0 <__divsf3x>:
 8b0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_split3>
 8b4:	68 f3       	brcs	.-38     	; 0x890 <__divsf3+0x8>

000008b6 <__divsf3_pse>:
 8b6:	99 23       	and	r25, r25
 8b8:	b1 f3       	breq	.-20     	; 0x8a6 <__divsf3+0x1e>
 8ba:	55 23       	and	r21, r21
 8bc:	91 f3       	breq	.-28     	; 0x8a2 <__divsf3+0x1a>
 8be:	95 1b       	sub	r25, r21
 8c0:	55 0b       	sbc	r21, r21
 8c2:	bb 27       	eor	r27, r27
 8c4:	aa 27       	eor	r26, r26
 8c6:	62 17       	cp	r22, r18
 8c8:	73 07       	cpc	r23, r19
 8ca:	84 07       	cpc	r24, r20
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__divsf3_pse+0x26>
 8ce:	9f 5f       	subi	r25, 0xFF	; 255
 8d0:	5f 4f       	sbci	r21, 0xFF	; 255
 8d2:	22 0f       	add	r18, r18
 8d4:	33 1f       	adc	r19, r19
 8d6:	44 1f       	adc	r20, r20
 8d8:	aa 1f       	adc	r26, r26
 8da:	a9 f3       	breq	.-22     	; 0x8c6 <__divsf3_pse+0x10>
 8dc:	35 d0       	rcall	.+106    	; 0x948 <__divsf3_pse+0x92>
 8de:	0e 2e       	mov	r0, r30
 8e0:	3a f0       	brmi	.+14     	; 0x8f0 <__divsf3_pse+0x3a>
 8e2:	e0 e8       	ldi	r30, 0x80	; 128
 8e4:	32 d0       	rcall	.+100    	; 0x94a <__divsf3_pse+0x94>
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	e6 95       	lsr	r30
 8ec:	00 1c       	adc	r0, r0
 8ee:	ca f7       	brpl	.-14     	; 0x8e2 <__divsf3_pse+0x2c>
 8f0:	2b d0       	rcall	.+86     	; 0x948 <__divsf3_pse+0x92>
 8f2:	fe 2f       	mov	r31, r30
 8f4:	29 d0       	rcall	.+82     	; 0x948 <__divsf3_pse+0x92>
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	bb 1f       	adc	r27, r27
 8fe:	26 17       	cp	r18, r22
 900:	37 07       	cpc	r19, r23
 902:	48 07       	cpc	r20, r24
 904:	ab 07       	cpc	r26, r27
 906:	b0 e8       	ldi	r27, 0x80	; 128
 908:	09 f0       	breq	.+2      	; 0x90c <__divsf3_pse+0x56>
 90a:	bb 0b       	sbc	r27, r27
 90c:	80 2d       	mov	r24, r0
 90e:	bf 01       	movw	r22, r30
 910:	ff 27       	eor	r31, r31
 912:	93 58       	subi	r25, 0x83	; 131
 914:	5f 4f       	sbci	r21, 0xFF	; 255
 916:	3a f0       	brmi	.+14     	; 0x926 <__divsf3_pse+0x70>
 918:	9e 3f       	cpi	r25, 0xFE	; 254
 91a:	51 05       	cpc	r21, r1
 91c:	78 f0       	brcs	.+30     	; 0x93c <__divsf3_pse+0x86>
 91e:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_inf>
 922:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	e4 f3       	brlt	.-8      	; 0x922 <__divsf3_pse+0x6c>
 92a:	98 3e       	cpi	r25, 0xE8	; 232
 92c:	d4 f3       	brlt	.-12     	; 0x922 <__divsf3_pse+0x6c>
 92e:	86 95       	lsr	r24
 930:	77 95       	ror	r23
 932:	67 95       	ror	r22
 934:	b7 95       	ror	r27
 936:	f7 95       	ror	r31
 938:	9f 5f       	subi	r25, 0xFF	; 255
 93a:	c9 f7       	brne	.-14     	; 0x92e <__divsf3_pse+0x78>
 93c:	88 0f       	add	r24, r24
 93e:	91 1d       	adc	r25, r1
 940:	96 95       	lsr	r25
 942:	87 95       	ror	r24
 944:	97 f9       	bld	r25, 7
 946:	08 95       	ret
 948:	e1 e0       	ldi	r30, 0x01	; 1
 94a:	66 0f       	add	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	bb 1f       	adc	r27, r27
 952:	62 17       	cp	r22, r18
 954:	73 07       	cpc	r23, r19
 956:	84 07       	cpc	r24, r20
 958:	ba 07       	cpc	r27, r26
 95a:	20 f0       	brcs	.+8      	; 0x964 <__divsf3_pse+0xae>
 95c:	62 1b       	sub	r22, r18
 95e:	73 0b       	sbc	r23, r19
 960:	84 0b       	sbc	r24, r20
 962:	ba 0b       	sbc	r27, r26
 964:	ee 1f       	adc	r30, r30
 966:	88 f7       	brcc	.-30     	; 0x94a <__divsf3_pse+0x94>
 968:	e0 95       	com	r30
 96a:	08 95       	ret

0000096c <__fixsfsi>:
 96c:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixunssfsi>
 970:	68 94       	set
 972:	b1 11       	cpse	r27, r1
 974:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>
 978:	08 95       	ret

0000097a <__fixunssfsi>:
 97a:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_splitA>
 97e:	88 f0       	brcs	.+34     	; 0x9a2 <__fixunssfsi+0x28>
 980:	9f 57       	subi	r25, 0x7F	; 127
 982:	98 f0       	brcs	.+38     	; 0x9aa <__fixunssfsi+0x30>
 984:	b9 2f       	mov	r27, r25
 986:	99 27       	eor	r25, r25
 988:	b7 51       	subi	r27, 0x17	; 23
 98a:	b0 f0       	brcs	.+44     	; 0x9b8 <__fixunssfsi+0x3e>
 98c:	e1 f0       	breq	.+56     	; 0x9c6 <__fixunssfsi+0x4c>
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	1a f0       	brmi	.+6      	; 0x99e <__fixunssfsi+0x24>
 998:	ba 95       	dec	r27
 99a:	c9 f7       	brne	.-14     	; 0x98e <__fixunssfsi+0x14>
 99c:	14 c0       	rjmp	.+40     	; 0x9c6 <__fixunssfsi+0x4c>
 99e:	b1 30       	cpi	r27, 0x01	; 1
 9a0:	91 f0       	breq	.+36     	; 0x9c6 <__fixunssfsi+0x4c>
 9a2:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_zero>
 9a6:	b1 e0       	ldi	r27, 0x01	; 1
 9a8:	08 95       	ret
 9aa:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_zero>
 9ae:	67 2f       	mov	r22, r23
 9b0:	78 2f       	mov	r23, r24
 9b2:	88 27       	eor	r24, r24
 9b4:	b8 5f       	subi	r27, 0xF8	; 248
 9b6:	39 f0       	breq	.+14     	; 0x9c6 <__fixunssfsi+0x4c>
 9b8:	b9 3f       	cpi	r27, 0xF9	; 249
 9ba:	cc f3       	brlt	.-14     	; 0x9ae <__fixunssfsi+0x34>
 9bc:	86 95       	lsr	r24
 9be:	77 95       	ror	r23
 9c0:	67 95       	ror	r22
 9c2:	b3 95       	inc	r27
 9c4:	d9 f7       	brne	.-10     	; 0x9bc <__fixunssfsi+0x42>
 9c6:	3e f4       	brtc	.+14     	; 0x9d6 <__fixunssfsi+0x5c>
 9c8:	90 95       	com	r25
 9ca:	80 95       	com	r24
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	08 95       	ret

000009d8 <__floatunsisf>:
 9d8:	e8 94       	clt
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <__floatsisf+0x12>

000009dc <__floatsisf>:
 9dc:	97 fb       	bst	r25, 7
 9de:	3e f4       	brtc	.+14     	; 0x9ee <__floatsisf+0x12>
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	99 23       	and	r25, r25
 9f0:	a9 f0       	breq	.+42     	; 0xa1c <__floatsisf+0x40>
 9f2:	f9 2f       	mov	r31, r25
 9f4:	96 e9       	ldi	r25, 0x96	; 150
 9f6:	bb 27       	eor	r27, r27
 9f8:	93 95       	inc	r25
 9fa:	f6 95       	lsr	r31
 9fc:	87 95       	ror	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b7 95       	ror	r27
 a04:	f1 11       	cpse	r31, r1
 a06:	f8 cf       	rjmp	.-16     	; 0x9f8 <__floatsisf+0x1c>
 a08:	fa f4       	brpl	.+62     	; 0xa48 <__floatsisf+0x6c>
 a0a:	bb 0f       	add	r27, r27
 a0c:	11 f4       	brne	.+4      	; 0xa12 <__floatsisf+0x36>
 a0e:	60 ff       	sbrs	r22, 0
 a10:	1b c0       	rjmp	.+54     	; 0xa48 <__floatsisf+0x6c>
 a12:	6f 5f       	subi	r22, 0xFF	; 255
 a14:	7f 4f       	sbci	r23, 0xFF	; 255
 a16:	8f 4f       	sbci	r24, 0xFF	; 255
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	16 c0       	rjmp	.+44     	; 0xa48 <__floatsisf+0x6c>
 a1c:	88 23       	and	r24, r24
 a1e:	11 f0       	breq	.+4      	; 0xa24 <__floatsisf+0x48>
 a20:	96 e9       	ldi	r25, 0x96	; 150
 a22:	11 c0       	rjmp	.+34     	; 0xa46 <__floatsisf+0x6a>
 a24:	77 23       	and	r23, r23
 a26:	21 f0       	breq	.+8      	; 0xa30 <__floatsisf+0x54>
 a28:	9e e8       	ldi	r25, 0x8E	; 142
 a2a:	87 2f       	mov	r24, r23
 a2c:	76 2f       	mov	r23, r22
 a2e:	05 c0       	rjmp	.+10     	; 0xa3a <__floatsisf+0x5e>
 a30:	66 23       	and	r22, r22
 a32:	71 f0       	breq	.+28     	; 0xa50 <__floatsisf+0x74>
 a34:	96 e8       	ldi	r25, 0x86	; 134
 a36:	86 2f       	mov	r24, r22
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	2a f0       	brmi	.+10     	; 0xa48 <__floatsisf+0x6c>
 a3e:	9a 95       	dec	r25
 a40:	66 0f       	add	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	da f7       	brpl	.-10     	; 0xa3e <__floatsisf+0x62>
 a48:	88 0f       	add	r24, r24
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__fp_inf>:
 a52:	97 f9       	bld	r25, 7
 a54:	9f 67       	ori	r25, 0x7F	; 127
 a56:	80 e8       	ldi	r24, 0x80	; 128
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	60 e0       	ldi	r22, 0x00	; 0
 a5c:	08 95       	ret

00000a5e <__fp_mintl>:
 a5e:	88 23       	and	r24, r24
 a60:	71 f4       	brne	.+28     	; 0xa7e <__fp_mintl+0x20>
 a62:	77 23       	and	r23, r23
 a64:	21 f0       	breq	.+8      	; 0xa6e <__fp_mintl+0x10>
 a66:	98 50       	subi	r25, 0x08	; 8
 a68:	87 2b       	or	r24, r23
 a6a:	76 2f       	mov	r23, r22
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <__fp_mintl+0x1e>
 a6e:	66 23       	and	r22, r22
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_mintl+0x18>
 a72:	99 27       	eor	r25, r25
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <__fp_mintl+0x32>
 a76:	90 51       	subi	r25, 0x10	; 16
 a78:	86 2b       	or	r24, r22
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	2a f0       	brmi	.+10     	; 0xa8a <__fp_mintl+0x2c>
 a80:	9a 95       	dec	r25
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	da f7       	brpl	.-10     	; 0xa80 <__fp_mintl+0x22>
 a8a:	88 0f       	add	r24, r24
 a8c:	96 95       	lsr	r25
 a8e:	87 95       	ror	r24
 a90:	97 f9       	bld	r25, 7
 a92:	08 95       	ret

00000a94 <__fp_mpack>:
 a94:	9f 3f       	cpi	r25, 0xFF	; 255
 a96:	31 f0       	breq	.+12     	; 0xaa4 <__fp_mpack_finite+0xc>

00000a98 <__fp_mpack_finite>:
 a98:	91 50       	subi	r25, 0x01	; 1
 a9a:	20 f4       	brcc	.+8      	; 0xaa4 <__fp_mpack_finite+0xc>
 a9c:	87 95       	ror	r24
 a9e:	77 95       	ror	r23
 aa0:	67 95       	ror	r22
 aa2:	b7 95       	ror	r27
 aa4:	88 0f       	add	r24, r24
 aa6:	91 1d       	adc	r25, r1
 aa8:	96 95       	lsr	r25
 aaa:	87 95       	ror	r24
 aac:	97 f9       	bld	r25, 7
 aae:	08 95       	ret

00000ab0 <__fp_nan>:
 ab0:	9f ef       	ldi	r25, 0xFF	; 255
 ab2:	80 ec       	ldi	r24, 0xC0	; 192
 ab4:	08 95       	ret

00000ab6 <__fp_pscA>:
 ab6:	00 24       	eor	r0, r0
 ab8:	0a 94       	dec	r0
 aba:	16 16       	cp	r1, r22
 abc:	17 06       	cpc	r1, r23
 abe:	18 06       	cpc	r1, r24
 ac0:	09 06       	cpc	r0, r25
 ac2:	08 95       	ret

00000ac4 <__fp_pscB>:
 ac4:	00 24       	eor	r0, r0
 ac6:	0a 94       	dec	r0
 ac8:	12 16       	cp	r1, r18
 aca:	13 06       	cpc	r1, r19
 acc:	14 06       	cpc	r1, r20
 ace:	05 06       	cpc	r0, r21
 ad0:	08 95       	ret

00000ad2 <__fp_round>:
 ad2:	09 2e       	mov	r0, r25
 ad4:	03 94       	inc	r0
 ad6:	00 0c       	add	r0, r0
 ad8:	11 f4       	brne	.+4      	; 0xade <__fp_round+0xc>
 ada:	88 23       	and	r24, r24
 adc:	52 f0       	brmi	.+20     	; 0xaf2 <__fp_round+0x20>
 ade:	bb 0f       	add	r27, r27
 ae0:	40 f4       	brcc	.+16     	; 0xaf2 <__fp_round+0x20>
 ae2:	bf 2b       	or	r27, r31
 ae4:	11 f4       	brne	.+4      	; 0xaea <__fp_round+0x18>
 ae6:	60 ff       	sbrs	r22, 0
 ae8:	04 c0       	rjmp	.+8      	; 0xaf2 <__fp_round+0x20>
 aea:	6f 5f       	subi	r22, 0xFF	; 255
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	08 95       	ret

00000af4 <__fp_split3>:
 af4:	57 fd       	sbrc	r21, 7
 af6:	90 58       	subi	r25, 0x80	; 128
 af8:	44 0f       	add	r20, r20
 afa:	55 1f       	adc	r21, r21
 afc:	59 f0       	breq	.+22     	; 0xb14 <__fp_splitA+0x10>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	71 f0       	breq	.+28     	; 0xb1e <__fp_splitA+0x1a>
 b02:	47 95       	ror	r20

00000b04 <__fp_splitA>:
 b04:	88 0f       	add	r24, r24
 b06:	97 fb       	bst	r25, 7
 b08:	99 1f       	adc	r25, r25
 b0a:	61 f0       	breq	.+24     	; 0xb24 <__fp_splitA+0x20>
 b0c:	9f 3f       	cpi	r25, 0xFF	; 255
 b0e:	79 f0       	breq	.+30     	; 0xb2e <__fp_splitA+0x2a>
 b10:	87 95       	ror	r24
 b12:	08 95       	ret
 b14:	12 16       	cp	r1, r18
 b16:	13 06       	cpc	r1, r19
 b18:	14 06       	cpc	r1, r20
 b1a:	55 1f       	adc	r21, r21
 b1c:	f2 cf       	rjmp	.-28     	; 0xb02 <__fp_split3+0xe>
 b1e:	46 95       	lsr	r20
 b20:	f1 df       	rcall	.-30     	; 0xb04 <__fp_splitA>
 b22:	08 c0       	rjmp	.+16     	; 0xb34 <__fp_splitA+0x30>
 b24:	16 16       	cp	r1, r22
 b26:	17 06       	cpc	r1, r23
 b28:	18 06       	cpc	r1, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	f1 cf       	rjmp	.-30     	; 0xb10 <__fp_splitA+0xc>
 b2e:	86 95       	lsr	r24
 b30:	71 05       	cpc	r23, r1
 b32:	61 05       	cpc	r22, r1
 b34:	08 94       	sec
 b36:	08 95       	ret

00000b38 <__fp_trunc>:
 b38:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_splitA>
 b3c:	a0 f0       	brcs	.+40     	; 0xb66 <__fp_trunc+0x2e>
 b3e:	be e7       	ldi	r27, 0x7E	; 126
 b40:	b9 17       	cp	r27, r25
 b42:	88 f4       	brcc	.+34     	; 0xb66 <__fp_trunc+0x2e>
 b44:	bb 27       	eor	r27, r27
 b46:	9f 38       	cpi	r25, 0x8F	; 143
 b48:	60 f4       	brcc	.+24     	; 0xb62 <__fp_trunc+0x2a>
 b4a:	16 16       	cp	r1, r22
 b4c:	b1 1d       	adc	r27, r1
 b4e:	67 2f       	mov	r22, r23
 b50:	78 2f       	mov	r23, r24
 b52:	88 27       	eor	r24, r24
 b54:	98 5f       	subi	r25, 0xF8	; 248
 b56:	f7 cf       	rjmp	.-18     	; 0xb46 <__fp_trunc+0xe>
 b58:	86 95       	lsr	r24
 b5a:	77 95       	ror	r23
 b5c:	67 95       	ror	r22
 b5e:	b1 1d       	adc	r27, r1
 b60:	93 95       	inc	r25
 b62:	96 39       	cpi	r25, 0x96	; 150
 b64:	c8 f3       	brcs	.-14     	; 0xb58 <__fp_trunc+0x20>
 b66:	08 95       	ret

00000b68 <__fp_zero>:
 b68:	e8 94       	clt

00000b6a <__fp_szero>:
 b6a:	bb 27       	eor	r27, r27
 b6c:	66 27       	eor	r22, r22
 b6e:	77 27       	eor	r23, r23
 b70:	cb 01       	movw	r24, r22
 b72:	97 f9       	bld	r25, 7
 b74:	08 95       	ret

00000b76 <__mulsf3>:
 b76:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__mulsf3x>
 b7a:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_round>
 b7e:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fp_pscA>
 b82:	38 f0       	brcs	.+14     	; 0xb92 <__mulsf3+0x1c>
 b84:	0e 94 62 05 	call	0xac4	; 0xac4 <__fp_pscB>
 b88:	20 f0       	brcs	.+8      	; 0xb92 <__mulsf3+0x1c>
 b8a:	95 23       	and	r25, r21
 b8c:	11 f0       	breq	.+4      	; 0xb92 <__mulsf3+0x1c>
 b8e:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_inf>
 b92:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__fp_nan>
 b96:	11 24       	eor	r1, r1
 b98:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>

00000b9c <__mulsf3x>:
 b9c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_split3>
 ba0:	70 f3       	brcs	.-36     	; 0xb7e <__mulsf3+0x8>

00000ba2 <__mulsf3_pse>:
 ba2:	95 9f       	mul	r25, r21
 ba4:	c1 f3       	breq	.-16     	; 0xb96 <__mulsf3+0x20>
 ba6:	95 0f       	add	r25, r21
 ba8:	50 e0       	ldi	r21, 0x00	; 0
 baa:	55 1f       	adc	r21, r21
 bac:	62 9f       	mul	r22, r18
 bae:	f0 01       	movw	r30, r0
 bb0:	72 9f       	mul	r23, r18
 bb2:	bb 27       	eor	r27, r27
 bb4:	f0 0d       	add	r31, r0
 bb6:	b1 1d       	adc	r27, r1
 bb8:	63 9f       	mul	r22, r19
 bba:	aa 27       	eor	r26, r26
 bbc:	f0 0d       	add	r31, r0
 bbe:	b1 1d       	adc	r27, r1
 bc0:	aa 1f       	adc	r26, r26
 bc2:	64 9f       	mul	r22, r20
 bc4:	66 27       	eor	r22, r22
 bc6:	b0 0d       	add	r27, r0
 bc8:	a1 1d       	adc	r26, r1
 bca:	66 1f       	adc	r22, r22
 bcc:	82 9f       	mul	r24, r18
 bce:	22 27       	eor	r18, r18
 bd0:	b0 0d       	add	r27, r0
 bd2:	a1 1d       	adc	r26, r1
 bd4:	62 1f       	adc	r22, r18
 bd6:	73 9f       	mul	r23, r19
 bd8:	b0 0d       	add	r27, r0
 bda:	a1 1d       	adc	r26, r1
 bdc:	62 1f       	adc	r22, r18
 bde:	83 9f       	mul	r24, r19
 be0:	a0 0d       	add	r26, r0
 be2:	61 1d       	adc	r22, r1
 be4:	22 1f       	adc	r18, r18
 be6:	74 9f       	mul	r23, r20
 be8:	33 27       	eor	r19, r19
 bea:	a0 0d       	add	r26, r0
 bec:	61 1d       	adc	r22, r1
 bee:	23 1f       	adc	r18, r19
 bf0:	84 9f       	mul	r24, r20
 bf2:	60 0d       	add	r22, r0
 bf4:	21 1d       	adc	r18, r1
 bf6:	82 2f       	mov	r24, r18
 bf8:	76 2f       	mov	r23, r22
 bfa:	6a 2f       	mov	r22, r26
 bfc:	11 24       	eor	r1, r1
 bfe:	9f 57       	subi	r25, 0x7F	; 127
 c00:	50 40       	sbci	r21, 0x00	; 0
 c02:	9a f0       	brmi	.+38     	; 0xc2a <__mulsf3_pse+0x88>
 c04:	f1 f0       	breq	.+60     	; 0xc42 <__mulsf3_pse+0xa0>
 c06:	88 23       	and	r24, r24
 c08:	4a f0       	brmi	.+18     	; 0xc1c <__mulsf3_pse+0x7a>
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	bb 1f       	adc	r27, r27
 c10:	66 1f       	adc	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	91 50       	subi	r25, 0x01	; 1
 c18:	50 40       	sbci	r21, 0x00	; 0
 c1a:	a9 f7       	brne	.-22     	; 0xc06 <__mulsf3_pse+0x64>
 c1c:	9e 3f       	cpi	r25, 0xFE	; 254
 c1e:	51 05       	cpc	r21, r1
 c20:	80 f0       	brcs	.+32     	; 0xc42 <__mulsf3_pse+0xa0>
 c22:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__fp_inf>
 c26:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__fp_szero>
 c2a:	5f 3f       	cpi	r21, 0xFF	; 255
 c2c:	e4 f3       	brlt	.-8      	; 0xc26 <__mulsf3_pse+0x84>
 c2e:	98 3e       	cpi	r25, 0xE8	; 232
 c30:	d4 f3       	brlt	.-12     	; 0xc26 <__mulsf3_pse+0x84>
 c32:	86 95       	lsr	r24
 c34:	77 95       	ror	r23
 c36:	67 95       	ror	r22
 c38:	b7 95       	ror	r27
 c3a:	f7 95       	ror	r31
 c3c:	e7 95       	ror	r30
 c3e:	9f 5f       	subi	r25, 0xFF	; 255
 c40:	c1 f7       	brne	.-16     	; 0xc32 <__mulsf3_pse+0x90>
 c42:	fe 2b       	or	r31, r30
 c44:	88 0f       	add	r24, r24
 c46:	91 1d       	adc	r25, r1
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <_exit>:
 c50:	f8 94       	cli

00000c52 <__stop_program>:
 c52:	ff cf       	rjmp	.-2      	; 0xc52 <__stop_program>
